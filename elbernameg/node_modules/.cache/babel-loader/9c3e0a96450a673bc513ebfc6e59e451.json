{"ast":null,"code":"/**\n * @remix-run/router v1.0.3-pre.0\n *\n * Copyright (c) Remix Software Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE.md file in the root directory of this source tree.\n *\n * @license MIT\n */\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n  return _extends.apply(this, arguments);\n} ////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\n\n\nvar Action;\n\n(function (Action) {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Action[\"Pop\"] = \"POP\";\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n\n  Action[\"Push\"] = \"PUSH\";\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n\n  Action[\"Replace\"] = \"REPLACE\";\n})(Action || (Action = {}));\n\nconst PopStateEventType = \"popstate\";\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\n\nfunction createMemoryHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    initialEntries = [\"/\"],\n    initialIndex,\n    v5Compat = false\n  } = options;\n  let entries; // Declare so we can access from createMemoryLocation\n\n  entries = initialEntries.map((entry, index) => createMemoryLocation(entry, typeof entry === \"string\" ? null : entry.state, index === 0 ? \"default\" : undefined));\n  let index = clampIndex(initialIndex == null ? entries.length - 1 : initialIndex);\n  let action = Action.Pop;\n  let listener = null;\n\n  function clampIndex(n) {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n\n  function getCurrentLocation() {\n    return entries[index];\n  }\n\n  function createMemoryLocation(to, state, key) {\n    if (state === void 0) {\n      state = null;\n    }\n\n    let location = createLocation(entries ? getCurrentLocation().pathname : \"/\", to, state, key);\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in memory history: \" + JSON.stringify(to));\n    return location;\n  }\n\n  let history = {\n    get index() {\n      return index;\n    },\n\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getCurrentLocation();\n    },\n\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n\n      if (v5Compat && listener) {\n        listener({\n          action,\n          location: nextLocation\n        });\n      }\n    },\n\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n\n      if (listener) {\n        listener({\n          action,\n          location: getCurrentLocation()\n        });\n      }\n    },\n\n    listen(fn) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    }\n\n  };\n  return history;\n}\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\n\n\nfunction createBrowserHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createBrowserLocation(window, globalHistory) {\n    let {\n      pathname,\n      search,\n      hash\n    } = window.location;\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createBrowserHref(window, to) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(createBrowserLocation, createBrowserHref, null, options);\n}\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\n\n\nfunction createHashHistory(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  function createHashLocation(window, globalHistory) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\"\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\"\", {\n      pathname,\n      search,\n      hash\n    }, // state defaults to `null` because `window.history.state` does\n    globalHistory.state && globalHistory.state.usr || null, globalHistory.state && globalHistory.state.key || \"default\");\n  }\n\n  function createHashHref(window, to) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location, to) {\n    warning$1(location.pathname.charAt(0) === \"/\", \"relative pathnames are not supported in hash history.push(\" + JSON.stringify(to) + \")\");\n  }\n\n  return getUrlBasedHistory(createHashLocation, createHashHref, validateHashLocation, options);\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\n\nfunction warning$1(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n/**\n * For browser-based histories, we combine the state and key into an object\n */\n\n\nfunction getHistoryState(location) {\n  return {\n    usr: location.state,\n    key: location.key\n  };\n}\n/**\n * Creates a Location object with a unique key from the given Path\n */\n\n\nfunction createLocation(current, to, state, key) {\n  if (state === void 0) {\n    state = null;\n  }\n\n  let location = _extends({\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\"\n  }, typeof to === \"string\" ? parsePath(to) : to, {\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: to && to.key || key || createKey()\n  });\n\n  return location;\n}\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\n\n\nfunction createPath(_ref) {\n  let {\n    pathname = \"/\",\n    search = \"\",\n    hash = \"\"\n  } = _ref;\n  if (search && search !== \"?\") pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\") pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\n\n\nfunction parsePath(path) {\n  let parsedPath = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nfunction getUrlBasedHistory(getLocation, createHref, validateLocation, options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  let {\n    window = document.defaultView,\n    v5Compat = false\n  } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener = null;\n\n  function handlePop() {\n    action = Action.Pop;\n\n    if (listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function push(to, state) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location); // try...catch because iOS limits us to 100 pushState calls :/\n\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  function replace(to, state) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({\n        action,\n        location: history.location\n      });\n    }\n  }\n\n  let history = {\n    get action() {\n      return action;\n    },\n\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n\n    listen(fn) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n\n    createHref(to) {\n      return createHref(window, to);\n    },\n\n    push,\n    replace,\n\n    go(n) {\n      return globalHistory.go(n);\n    }\n\n  };\n  return history;\n} //#endregion\n\n\nvar ResultType;\n\n(function (ResultType) {\n  ResultType[\"data\"] = \"data\";\n  ResultType[\"deferred\"] = \"deferred\";\n  ResultType[\"redirect\"] = \"redirect\";\n  ResultType[\"error\"] = \"error\";\n})(ResultType || (ResultType = {}));\n\nfunction isIndexRoute(route) {\n  return route.index === true;\n} // Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\n\n\nfunction convertRoutesToDataRoutes(routes, parentPath, allIds) {\n  if (parentPath === void 0) {\n    parentPath = [];\n  }\n\n  if (allIds === void 0) {\n    allIds = new Set();\n  }\n\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(route.index !== true || !route.children, \"Cannot specify children on an index route\");\n    invariant(!allIds.has(id), \"Found a route id collision on id \\\"\" + id + \"\\\".  Route \" + \"id's must be globally unique within Data Router usages\");\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute = _extends({}, route, {\n        id\n      });\n\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute = _extends({}, route, {\n        id,\n        children: route.children ? convertRoutesToDataRoutes(route.children, treePath, allIds) : undefined\n      });\n\n      return pathOrLayoutRoute;\n    }\n  });\n}\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\n\n\nfunction matchRoutes(routes, locationArg, basename) {\n  if (basename === void 0) {\n    basename = \"/\";\n  }\n\n  let location = typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n  let matches = null;\n\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch(branches[i], // incoming pathnames are always encoded from either window.location or\n    // from route.navigate, but we want to match against the unencoded paths\n    // in the route definitions\n    safelyDecodeURI(pathname));\n  }\n\n  return matches;\n}\n\nfunction flattenRoutes(routes, branches, parentsMeta, parentPath) {\n  if (branches === void 0) {\n    branches = [];\n  }\n\n  if (parentsMeta === void 0) {\n    parentsMeta = [];\n  }\n\n  if (parentPath === void 0) {\n    parentPath = \"\";\n  }\n\n  routes.forEach((route, index) => {\n    let meta = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(meta.relativePath.startsWith(parentPath), \"Absolute route path \\\"\" + meta.relativePath + \"\\\" nested under path \" + (\"\\\"\" + parentPath + \"\\\" is not valid. An absolute child route path \") + \"must start with the combined path of all its parent routes.\");\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta); // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n\n    if (route.children && route.children.length > 0) {\n      invariant( // Our types know better, but runtime JS may not!\n      // @ts-expect-error\n      route.index !== true, \"Index routes must not have child routes. Please remove \" + (\"all child routes from route path \\\"\" + path + \"\\\".\"));\n      flattenRoutes(route.children, branches, routesMeta, path);\n    } // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n\n\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({\n      path,\n      score: computeScore(path, route.index),\n      routesMeta\n    });\n  });\n  return branches;\n}\n\nfunction rankRouteBranches(branches) {\n  branches.sort((a, b) => a.score !== b.score ? b.score - a.score // Higher score first\n  : compareIndexes(a.routesMeta.map(meta => meta.childrenIndex), b.routesMeta.map(meta => meta.childrenIndex)));\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\n\nconst isSplat = s => s === \"*\";\n\nfunction computeScore(path, index) {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments.filter(s => !isSplat(s)).reduce((score, segment) => score + (paramRe.test(segment) ? dynamicSegmentValue : segment === \"\" ? emptySegmentValue : staticSegmentValue), initialScore);\n}\n\nfunction compareIndexes(a, b) {\n  let siblings = a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n  return siblings ? // If two routes are siblings, we should try to match the earlier sibling\n  // first. This allows people to have fine-grained control over the matching\n  // behavior by simply putting routes with identical paths in the order they\n  // want them tried.\n  a[a.length - 1] - b[b.length - 1] : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n  // so they sort equally.\n  0;\n}\n\nfunction matchRouteBranch(branch, pathname) {\n  let {\n    routesMeta\n  } = branch;\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches = [];\n\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname = matchedPathname === \"/\" ? pathname : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath({\n      path: meta.relativePath,\n      caseSensitive: meta.caseSensitive,\n      end\n    }, remainingPathname);\n    if (!match) return null;\n    Object.assign(matchedParams, match.params);\n    let route = meta.route;\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(joinPaths([matchedPathname, match.pathnameBase])),\n      route\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\n\n\nfunction generatePath(path, params) {\n  if (params === void 0) {\n    params = {};\n  }\n\n  return path.replace(/:(\\w+)/g, (_, key) => {\n    invariant(params[key] != null, \"Missing \\\":\" + key + \"\\\" param\");\n    return params[key];\n  }).replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n    const star = \"*\";\n\n    if (params[star] == null) {\n      // If no splat was provided, trim the trailing slash _unless_ it's\n      // the entire path\n      return str === \"/*\" ? \"/\" : \"\";\n    } // Apply the splat\n\n\n    return \"\" + prefix + params[star];\n  });\n}\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\n\n\nfunction matchPath(pattern, pathname) {\n  if (typeof pattern === \"string\") {\n    pattern = {\n      path: pattern,\n      caseSensitive: false,\n      end: true\n    };\n  }\n\n  let [matcher, paramNames] = compilePath(pattern.path, pattern.caseSensitive, pattern.end);\n  let match = pathname.match(matcher);\n  if (!match) return null;\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params = paramNames.reduce((memo, paramName, index) => {\n    // We need to compute the pathnameBase here using the raw splat value\n    // instead of using params[\"*\"] later because it will be decoded then\n    if (paramName === \"*\") {\n      let splatValue = captureGroups[index] || \"\";\n      pathnameBase = matchedPathname.slice(0, matchedPathname.length - splatValue.length).replace(/(.)\\/+$/, \"$1\");\n    }\n\n    memo[paramName] = safelyDecodeURIComponent(captureGroups[index] || \"\", paramName);\n    return memo;\n  }, {});\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern\n  };\n}\n\nfunction compilePath(path, caseSensitive, end) {\n  if (caseSensitive === void 0) {\n    caseSensitive = false;\n  }\n\n  if (end === void 0) {\n    end = true;\n  }\n\n  warning(path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"), \"Route path \\\"\" + path + \"\\\" will be treated as if it were \" + (\"\\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\" because the `*` character must \") + \"always follow a `/` in the pattern. To get rid of this warning, \" + (\"please change the route path to \\\"\" + path.replace(/\\*$/, \"/*\") + \"\\\".\"));\n  let paramNames = [];\n  let regexpSource = \"^\" + path.replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n  .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n  .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n  .replace(/:(\\w+)/g, (_, paramName) => {\n    paramNames.push(paramName);\n    return \"([^\\\\/]+)\";\n  });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource += path === \"*\" || path === \"/*\" ? \"(.*)$\" // Already matched the initial /, just match the rest\n    : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else ;\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(false, \"The URL path \\\"\" + value + \"\\\" could not be decoded because it is is a \" + \"malformed URL segment. This is probably due to a bad percent \" + (\"encoding (\" + error + \").\"));\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value, paramName) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(false, \"The value for the URL param \\\"\" + paramName + \"\\\" will not be decoded because\" + (\" the string \\\"\" + value + \"\\\" is a malformed URL segment. This is probably\") + (\" due to a bad percent encoding (\" + error + \").\"));\n    return value;\n  }\n}\n/**\n * @private\n */\n\n\nfunction stripBasename(pathname, basename) {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  } // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n\n\n  let startIndex = basename.endsWith(\"/\") ? basename.length - 1 : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\nfunction invariant(value, message) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n/**\n * @private\n */\n\n\nfunction warning(cond, message) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message); // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\n\n\nfunction resolvePath(to, fromPathname) {\n  if (fromPathname === void 0) {\n    fromPathname = \"/\";\n  }\n\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\"\n  } = typeof to === \"string\" ? parsePath(to) : to;\n  let pathname = toPathname ? toPathname.startsWith(\"/\") ? toPathname : resolvePathname(toPathname, fromPathname) : fromPathname;\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash)\n  };\n}\n\nfunction resolvePathname(relativePath, fromPathname) {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n  relativeSegments.forEach(segment => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(char, field, dest, path) {\n  return \"Cannot include a '\" + char + \"' character in a manually specified \" + (\"`to.\" + field + \"` field [\" + JSON.stringify(path) + \"].  Please separate it out to the \") + (\"`to.\" + dest + \"` field. Alternatively you may provide the full path as \") + \"a string in <Link to=\\\"...\\\"> and the router will parse it for you.\";\n}\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\n\n\nfunction getPathContributingMatches(matches) {\n  return matches.filter((match, index) => index === 0 || match.route.path && match.route.path.length > 0);\n}\n/**\n * @private\n */\n\n\nfunction resolveTo(toArg, routePathnames, locationPathname, isPathRelative) {\n  if (isPathRelative === void 0) {\n    isPathRelative = false;\n  }\n\n  let to;\n\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = _extends({}, toArg);\n    invariant(!to.pathname || !to.pathname.includes(\"?\"), getInvalidPathError(\"?\", \"pathname\", \"search\", to));\n    invariant(!to.pathname || !to.pathname.includes(\"#\"), getInvalidPathError(\"#\", \"pathname\", \"hash\", to));\n    invariant(!to.search || !to.search.includes(\"#\"), getInvalidPathError(\"#\", \"search\", \"hash\", to));\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n  let from; // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\"); // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    } // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n\n\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from); // Ensure the pathname has a trailing slash if the original \"to\" had one\n\n  let hasExplicitTrailingSlash = toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\"); // Or if this was a link to the current path which has a trailing slash\n\n  let hasCurrentTrailingSlash = (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n\n  if (!path.pathname.endsWith(\"/\") && (hasExplicitTrailingSlash || hasCurrentTrailingSlash)) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n/**\n * @private\n */\n\n\nfunction getToPathname(to) {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || to.pathname === \"\" ? \"/\" : typeof to === \"string\" ? parsePath(to).pathname : to.pathname;\n}\n/**\n * @private\n */\n\n\nconst joinPaths = paths => paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n/**\n * @private\n */\n\n\nconst normalizePathname = pathname => pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n/**\n * @private\n */\n\n\nconst normalizeSearch = search => !search || search === \"?\" ? \"\" : search.startsWith(\"?\") ? search : \"?\" + search;\n/**\n * @private\n */\n\n\nconst normalizeHash = hash => !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\n\n\nconst json = function json(data, init) {\n  if (init === void 0) {\n    init = {};\n  }\n\n  let responseInit = typeof init === \"number\" ? {\n    status: init\n  } : init;\n  let headers = new Headers(responseInit.headers);\n\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), _extends({}, responseInit, {\n    headers\n  }));\n};\n\nclass AbortedDeferredError extends Error {}\n\nclass DeferredData {\n  constructor(data) {\n    this.pendingKeys = new Set();\n    this.subscriber = undefined;\n    invariant(data && typeof data === \"object\" && !Array.isArray(data), \"defer() only accepts plain objects\"); // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n\n    let reject;\n    this.abortPromise = new Promise((_, r) => reject = r);\n    this.controller = new AbortController();\n\n    let onAbort = () => reject(new AbortedDeferredError(\"Deferred data aborted\"));\n\n    this.unlistenAbortSignal = () => this.controller.signal.removeEventListener(\"abort\", onAbort);\n\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n    this.data = Object.entries(data).reduce((acc, _ref) => {\n      let [key, value] = _ref;\n      return Object.assign(acc, {\n        [key]: this.trackPromise(key, value)\n      });\n    }, {});\n  }\n\n  trackPromise(key, value) {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key); // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n\n    let promise = Promise.race([value, this.abortPromise]).then(data => this.onSettle(promise, key, null, data), error => this.onSettle(promise, key, error)); // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n\n    promise.catch(() => {});\n    Object.defineProperty(promise, \"_tracked\", {\n      get: () => true\n    });\n    return promise;\n  }\n\n  onSettle(promise, key, error, data) {\n    if (this.controller.signal.aborted && error instanceof AbortedDeferredError) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n\n    if (error) {\n      Object.defineProperty(promise, \"_error\", {\n        get: () => error\n      });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", {\n      get: () => data\n    });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal) {\n    let aborted = false;\n\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise(resolve => {\n        this.subscribe(aborted => {\n          signal.removeEventListener(\"abort\", onAbort);\n\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(this.data !== null && this.done, \"Can only unwrap data on initialized and settled deferreds\");\n    return Object.entries(this.data).reduce((acc, _ref2) => {\n      let [key, value] = _ref2;\n      return Object.assign(acc, {\n        [key]: unwrapTrackedPromise(value)\n      });\n    }, {});\n  }\n\n}\n\nfunction isTrackedPromise(value) {\n  return value instanceof Promise && value._tracked === true;\n}\n\nfunction unwrapTrackedPromise(value) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n\n  return value._data;\n}\n\nfunction defer(data) {\n  return new DeferredData(data);\n}\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\n\n\nconst redirect = function redirect(url, init) {\n  if (init === void 0) {\n    init = 302;\n  }\n\n  let responseInit = init;\n\n  if (typeof responseInit === \"number\") {\n    responseInit = {\n      status: responseInit\n    };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n  return new Response(null, _extends({}, responseInit, {\n    headers\n  }));\n};\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\n\n\nclass ErrorResponse {\n  constructor(status, statusText, data) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n\n}\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\n\n\nfunction isRouteErrorResponse(e) {\n  return e instanceof ErrorResponse;\n}\n\nconst IDLE_NAVIGATION = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst IDLE_FETCHER = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined\n};\nconst isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\" && typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser; //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\n\nfunction createRouter(init) {\n  invariant(init.routes.length > 0, \"You must provide a non-empty routes array to createRouter\");\n  let dataRoutes = convertRoutesToDataRoutes(init.routes); // Cleanup function for history\n\n  let unlistenHistory = null; // Externally-provided functions to call on all state changes\n\n  let subscribers = new Set(); // Externally-provided object to hold scroll restoration locations during routing\n\n  let savedScrollPositions = null; // Externally-provided function to get scroll restoration keys\n\n  let getScrollRestorationKey = null; // Externally-provided function to get current scroll position\n\n  let getScrollPosition = null; // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n\n  let initialScrollRestored = false;\n  let initialMatches = matchRoutes(dataRoutes, init.history.location, init.basename);\n  let initialErrors = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let {\n      matches,\n      route,\n      error\n    } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = {\n      [route.id]: error\n    };\n  }\n\n  let initialized = !initialMatches.some(m => m.route.loader) || init.hydrationData != null;\n  let router;\n  let state = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: init.hydrationData && init.hydrationData.loaderData || {},\n    actionData: init.hydrationData && init.hydrationData.actionData || null,\n    errors: init.hydrationData && init.hydrationData.errors || initialErrors,\n    fetchers: new Map()\n  }; // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n\n  let pendingAction = Action.Pop; // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n\n  let pendingPreventScrollReset = false; // AbortController for the active navigation\n\n  let pendingNavigationController; // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n\n  let isUninterruptedRevalidation = false; // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n\n  let isRevalidationRequired = false; // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n\n  let cancelledDeferredRoutes = []; // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n\n  let cancelledFetcherLoads = []; // AbortControllers for any in-flight fetchers\n\n  let fetchControllers = new Map(); // Track loads based on the order in which they started\n\n  let incrementingLoadId = 0; // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n\n  let pendingNavigationLoadId = -1; // Fetchers that triggered data reloads as a result of their actions\n\n  let fetchReloadIds = new Map(); // Fetchers that triggered redirect navigations from their actions\n\n  let fetchRedirectIds = new Set(); // Most recent href/match for fetcher.load calls for fetchers\n\n  let fetchLoadMatches = new Map(); // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n\n  let activeDeferreds = new Map(); // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(_ref => {\n      let {\n        action: historyAction,\n        location\n      } = _ref;\n      return startNavigation(historyAction, location);\n    }); // Kick off initial data load if needed.  Use Pop to avoid modifying history\n\n    if (!state.initialized) {\n      startNavigation(Action.Pop, state.location);\n    }\n\n    return router;\n  } // Clean up a router and it's side effects\n\n\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  } // Subscribe to state updates for the router\n\n\n  function subscribe(fn) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  } // Update our state and notify the calling context of the change\n\n\n  function updateState(newState) {\n    state = _extends({}, state, newState);\n    subscribers.forEach(subscriber => subscriber(state));\n  } // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n\n\n  function completeNavigation(location, newState) {\n    var _state$navigation$for; // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n\n\n    let isActionReload = state.actionData != null && state.navigation.formMethod != null && state.navigation.state === \"loading\" && ((_state$navigation$for = state.navigation.formAction) == null ? void 0 : _state$navigation$for.split(\"?\")[0]) === location.pathname; // Always preserve any existing loaderData from re-used routes\n\n    let newLoaderData = newState.loaderData ? {\n      loaderData: mergeLoaderData(state.loaderData, newState.loaderData, newState.matches || [])\n    } : {};\n    updateState(_extends({}, isActionReload ? {} : {\n      actionData: null\n    }, newState, newLoaderData, {\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData ? false : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset\n    }));\n    if (isUninterruptedRevalidation) ;else if (pendingAction === Action.Pop) ;else if (pendingAction === Action.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === Action.Replace) {\n      init.history.replace(location, location.state);\n    } // Reset stateful navigation vars\n\n    pendingAction = Action.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  } // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n\n\n  async function navigate(to, opts) {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let {\n      path,\n      submission,\n      error\n    } = normalizeNavigateOptions(to, opts);\n    let location = createLocation(state.location, path, opts && opts.state); // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n\n    let url = createURL(createPath(location));\n    location = _extends({}, location, {\n      pathname: url.pathname,\n      search: url.search,\n      hash: url.hash\n    });\n    let historyAction = (opts && opts.replace) === true || submission != null ? Action.Replace : Action.Push;\n    let preventScrollReset = opts && \"preventScrollReset\" in opts ? opts.preventScrollReset === true : undefined;\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace\n    });\n  } // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n\n\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({\n      revalidation: \"loading\"\n    }); // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n\n    if (state.navigation.state === \"submitting\") {\n      return;\n    } // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n\n\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true\n      });\n      return;\n    } // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n\n\n    startNavigation(pendingAction || state.historyAction, state.navigation.location, {\n      overrideNavigation: state.navigation\n    });\n  } // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n\n\n  async function startNavigation(historyAction, location, opts) {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation = (opts && opts.startUninterruptedRevalidation) === true; // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename); // Short circuit with a 404 on the root error boundary if we match nothing\n\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes); // Cancel all pending deferred on 404s since we don't keep any routes\n\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error\n        }\n      });\n      return;\n    } // Short circuit if it's only a hash change\n\n\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, {\n        matches\n      });\n      return;\n    } // Create a controller/Request for this navigation\n\n\n    pendingNavigationController = new AbortController();\n    let request = createRequest(location, pendingNavigationController.signal, opts && opts.submission);\n    let pendingActionData;\n    let pendingError;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(request, location, opts.submission, matches, {\n        replace: opts.replace\n      });\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation = _extends({\n        state: \"loading\",\n        location\n      }, opts.submission);\n\n      loadingNavigation = navigation;\n    } // Call loaders\n\n\n    let {\n      shortCircuited,\n      loaderData,\n      errors\n    } = await handleLoaders(request, location, matches, loadingNavigation, opts && opts.submission, opts && opts.replace, pendingActionData, pendingError);\n\n    if (shortCircuited) {\n      return;\n    } // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n\n\n    pendingNavigationController = null;\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors\n    });\n  } // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n\n\n  async function handleAction(request, location, submission, matches, opts) {\n    interruptActiveLoads(); // Put us in a submitting state\n\n    let navigation = _extends({\n      state: \"submitting\",\n      location\n    }, submission);\n\n    updateState({\n      navigation\n    }); // Call our action and get the result\n\n    let result;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, router.basename);\n\n      if (request.signal.aborted) {\n        return {\n          shortCircuited: true\n        };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, result.location)\n      }, submission);\n\n      await startRedirectNavigation(result, redirectNavigation, opts && opts.replace);\n      return {\n        shortCircuited: true\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id); // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n\n      if ((opts && opts.replace) !== true) {\n        pendingAction = Action.Push;\n      }\n\n      return {\n        pendingActionError: {\n          [boundaryMatch.route.id]: result.error\n        }\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: {\n        [actionMatch.route.id]: result.data\n      }\n    };\n  } // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n\n\n  async function handleLoaders(request, location, matches, overrideNavigation, submission, replace, pendingActionData, pendingError) {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n\n    if (!loadingNavigation) {\n      let navigation = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches); // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n\n    cancelActiveDeferreds(routeId => !(matches && matches.some(m => m.route.id === routeId)) || matchesToLoad && matchesToLoad.some(m => m.route.id === routeId)); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null\n      });\n      return {\n        shortCircuited: true\n      };\n    } // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n\n\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(_ref2 => {\n        let [key] = _ref2;\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState(_extends({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null\n      }, revalidatingFetchers.length > 0 ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(_ref3 => {\n      let [key] = _ref3;\n      return fetchControllers.set(key, pendingNavigationController);\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, request);\n\n    if (request.signal.aborted) {\n      return {\n        shortCircuited: true\n      };\n    } // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n\n\n    revalidatingFetchers.forEach(_ref4 => {\n      let [key] = _ref4;\n      return fetchControllers.delete(key);\n    }); // If any loaders returned a redirect Response, start a new REPLACE navigation\n\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return {\n        shortCircuited: true\n      };\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, matches, matchesToLoad, loaderResults, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds); // Wire up subscribers to update loaderData as promises settle\n\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe(aborted => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n    return _extends({\n      loaderData,\n      errors\n    }, didAbortFetchLoads || revalidatingFetchers.length > 0 ? {\n      fetchers: new Map(state.fetchers)\n    } : {});\n  }\n\n  function getFetcher(key) {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  } // Trigger a fetcher load/submit for the given fetcher key\n\n\n  function fetch(key, routeId, href, opts) {\n    if (isServer) {\n      throw new Error(\"router.fetch() was called during the server render, but it shouldn't be. \" + \"You are likely calling a useFetcher() method in the body of your component. \" + \"Try moving it to a useEffect or a callback.\");\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let {\n      path,\n      submission\n    } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    } // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n\n\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  } // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n\n\n  async function handleFetcherAction(key, routeId, path, match, requestMatches, submission) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let {\n        error\n      } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    } // Put this fetcher into it's submitting state\n\n\n    let existingFetcher = state.fetchers.get(key);\n\n    let fetcher = _extends({\n      state: \"submitting\"\n    }, submission, {\n      data: existingFetcher && existingFetcher.data\n    });\n\n    state.fetchers.set(key, fetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the action for the fetcher\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n    let actionResult = await callLoaderOrAction(\"action\", fetchRequest, match, requestMatches, router.basename);\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n\n      let loadingFetcher = _extends({\n        state: \"loading\"\n      }, submission, {\n        data: undefined\n      });\n\n      state.fetchers.set(key, loadingFetcher);\n      updateState({\n        fetchers: new Map(state.fetchers)\n      });\n\n      let redirectNavigation = _extends({\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location)\n      }, submission);\n\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    } // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n\n\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(nextLocation, abortController.signal);\n    let matches = state.navigation.state !== \"idle\" ? matchRoutes(dataRoutes, state.navigation.location, init.basename) : state.matches;\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher = _extends({\n      state: \"loading\",\n      data: actionResult.data\n    }, submission);\n\n    state.fetchers.set(key, loadFetcher);\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(state, matches, submission, nextLocation, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, {\n      [match.route.id]: actionResult.data\n    }, undefined, // No need to send through errors since we short circuit above\n    fetchLoadMatches); // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n\n    revalidatingFetchers.filter(_ref5 => {\n      let [staleKey] = _ref5;\n      return staleKey !== key;\n    }).forEach(_ref6 => {\n      let [staleKey] = _ref6;\n      let existingFetcher = state.fetchers.get(staleKey);\n      let revalidatingFetcher = {\n        state: \"loading\",\n        data: existingFetcher && existingFetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(staleKey, revalidatingFetcher);\n      fetchControllers.set(staleKey, abortController);\n    });\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n    let {\n      results,\n      loaderResults,\n      fetcherResults\n    } = await callLoadersAndMaybeResolveData(state.matches, matches, matchesToLoad, revalidatingFetchers, revalidationRequest);\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(_ref7 => {\n      let [staleKey] = _ref7;\n      return fetchControllers.delete(staleKey);\n    });\n    let redirect = findRedirect(results);\n\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    } // Process and commit output from loaders\n\n\n    let {\n      loaderData,\n      errors\n    } = processLoaderData(state, state.matches, matchesToLoad, loaderResults, undefined, revalidatingFetchers, fetcherResults, activeDeferreds);\n    let doneFetcher = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId); // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n\n    if (state.navigation.state === \"loading\" && loadId > pendingNavigationLoadId) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers)\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState(_extends({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches)\n      }, didAbortFetchLoads ? {\n        fetchers: new Map(state.fetchers)\n      } : {}));\n      isRevalidationRequired = false;\n    }\n  } // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n\n\n  async function handleFetcherLoader(key, routeId, path, match, matches) {\n    let existingFetcher = state.fetchers.get(key); // Put this fetcher into it's loading state\n\n    let loadingFetcher = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    }); // Call the loader for this fetcher route match\n\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result = await callLoaderOrAction(\"loader\", fetchRequest, match, matches, router.basename); // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n\n    if (isDeferredResult(result)) {\n      result = (await resolveDeferredData(result, fetchRequest.signal, true)) || result;\n    } // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n\n\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    } // If the loader threw a redirect Response, start a new REPLACE navigation\n\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    } // Process any non-redirect errors thrown\n\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key); // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error\n        }\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\"); // Put the fetcher back into an idle state\n\n    let doneFetcher = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({\n      fetchers: new Map(state.fetchers)\n    });\n  }\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n\n\n  async function startRedirectNavigation(redirect, navigation, replace) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n\n    invariant(navigation.location, \"Expected a location on the redirect navigation\"); // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n\n    pendingNavigationController = null;\n    let redirectHistoryAction = replace === true ? Action.Replace : Action.Push;\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(currentMatches, matches, matchesToLoad, fetchersToLoad, request) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, router.basename)), ...fetchersToLoad.map(_ref8 => {\n      let [, href, match, fetchMatches] = _ref8;\n      return callLoaderOrAction(\"loader\", createRequest(href, request.signal), match, fetchMatches, router.basename);\n    })]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n    await Promise.all([resolveDeferredResults(currentMatches, matchesToLoad, loaderResults, request.signal, false, state.loaderData), resolveDeferredResults(currentMatches, fetchersToLoad.map(_ref9 => {\n      let [,, match] = _ref9;\n      return match;\n    }), fetcherResults, request.signal, true)]);\n    return {\n      results,\n      loaderResults,\n      fetcherResults\n    };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true; // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds()); // Abort in-flight fetcher loads\n\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key, routeId, error) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error\n      },\n      fetchers: new Map(state.fetchers)\n    });\n  }\n\n  function deleteFetcher(key) {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, \"Expected fetch controller: \" + key);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone() {\n    let doneKeys = [];\n\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, \"Expected fetcher: \" + key);\n\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId) {\n    let yeetedKeys = [];\n\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, \"Expected fetcher: \" + key);\n\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(predicate) {\n    let cancelledRouteIds = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  } // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n\n\n  function enableScrollRestoration(positions, getPosition, getKey) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n\n    getScrollRestorationKey = getKey || (location => location.key); // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n\n\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n\n      if (y != null) {\n        updateState({\n          restoreScrollPosition: y\n        });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(location, matches) {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map(m => createUseMatchesMatch(m, state.loaderData));\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n\n    get state() {\n      return state;\n    },\n\n    get routes() {\n      return dataRoutes;\n    },\n\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: to => init.history.createHref(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds\n  };\n  return router;\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\n\nconst validActionMethods = new Set([\"POST\", \"PUT\", \"PATCH\", \"DELETE\"]);\nconst validRequestMethods = new Set([\"GET\", \"HEAD\", ...validActionMethods]);\n\nfunction unstable_createStaticHandler(routes) {\n  invariant(routes.length > 0, \"You must provide a non-empty routes array to unstable_createStaticHandler\");\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n\n  async function query(request) {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      let {\n        matches: methodNotAllowedMatches,\n        route,\n        error\n      } = getMethodNotAllowedMatches(dataRoutes);\n      return {\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    } else if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    let result = await queryImpl(request, location, matches);\n\n    if (result instanceof Response) {\n      return result;\n    } // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n\n\n    return _extends({\n      location\n    }, result);\n  }\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated thrown Response (such as a\n   * 404 or 405) will have a custom X-Remix-Router-Error: \"yes\" header on it\n   * in order to differentiate from responses thrown from user actions/loaders.\n   */\n\n\n  async function queryRoute(request, routeId) {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      throw createRouterErrorResponse(null, {\n        status: 405,\n        statusText: \"Method Not Allowed\"\n      });\n    } else if (!matches) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\"\n      });\n    }\n\n    let match = routeId ? matches.find(m => m.route.id === routeId) : getTargetMatch(matches, location);\n\n    if (!match) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\"\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, match);\n\n    if (result instanceof Response) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    } // Pick off the right state value to return\n\n\n    let routeData = [result.actionData, result.loaderData].find(v => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(request, location, matches, routeMatch) {\n    invariant(request.signal, \"query()/queryRoute() requests must contain an AbortController signal\");\n\n    try {\n      if (validActionMethods.has(request.method)) {\n        let result = await submit(request, matches, routeMatch || getTargetMatch(matches, location), routeMatch != null);\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, routeMatch);\n      return result instanceof Response ? result : _extends({}, result, {\n        actionData: null,\n        actionHeaders: {}\n      });\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n\n        return e.response;\n      } // Redirects are always returned since they don't propagate to catch\n      // boundaries\n\n\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n\n      throw e;\n    }\n  }\n\n  async function submit(request, matches, actionMatch, isRouteRequest) {\n    let result;\n\n    if (!actionMatch.route.action) {\n      let href = createServerHref(new URL(request.url));\n\n      if (isRouteRequest) {\n        throw createRouterErrorResponse(null, {\n          status: 405,\n          statusText: \"Method Not Allowed\"\n        });\n      }\n\n      result = getMethodNotAllowedResult(href);\n    } else {\n      result = await callLoaderOrAction(\"action\", request, actionMatch, matches, undefined, // Basename not currently supported in static handlers\n      true, isRouteRequest);\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(method + \"() call aborted\");\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location\n        }\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {}\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: {\n          [actionMatch.route.id]: result.data\n        },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {}\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, undefined, {\n        [boundaryMatch.route.id]: result.error\n      }); // action status codes take precedence over loader status codes\n\n      return _extends({}, context, {\n        statusCode: isRouteErrorResponse(result.error) ? result.error.status : 500,\n        actionData: null,\n        actionHeaders: _extends({}, result.headers ? {\n          [actionMatch.route.id]: result.headers\n        } : {})\n      });\n    }\n\n    let context = await loadRouteData(request, matches);\n    return _extends({}, context, result.statusCode ? {\n      statusCode: result.statusCode\n    } : {}, {\n      actionData: {\n        [actionMatch.route.id]: result.data\n      },\n      actionHeaders: _extends({}, result.headers ? {\n        [actionMatch.route.id]: result.headers\n      } : {})\n    });\n  }\n\n  async function loadRouteData(request, matches, routeMatch, pendingActionError) {\n    let isRouteRequest = routeMatch != null;\n    let requestMatches = routeMatch ? [routeMatch] : getLoaderMatchesUntilBoundary(matches, Object.keys(pendingActionError || {})[0]);\n    let matchesToLoad = requestMatches.filter(m => m.route.loader); // Short circuit if we have no loaders to run\n\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {}\n      };\n    }\n\n    let results = await Promise.all([...matchesToLoad.map(match => callLoaderOrAction(\"loader\", request, match, matches, undefined, // Basename not currently supported in static handlers\n    true, isRouteRequest))]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(method + \"() call aborted\");\n    } // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n\n\n    results.forEach(result => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    }); // Process and commit output from loaders\n\n    let context = processRouteLoaderData(matches, matchesToLoad, results, pendingActionError);\n    return _extends({}, context, {\n      matches\n    });\n  }\n\n  function createRouterErrorResponse(body, init) {\n    return new Response(body, _extends({}, init, {\n      headers: _extends({}, init.headers, {\n        \"X-Remix-Router-Error\": \"yes\"\n      })\n    }));\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute\n  };\n} //#endregion\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\n\n\nfunction getStaticContextFromError(routes, context, error) {\n  let newContext = _extends({}, context, {\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error\n    }\n  });\n\n  return newContext;\n} // Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\n\n\nfunction normalizeNavigateOptions(to, opts, isFetcher) {\n  if (isFetcher === void 0) {\n    isFetcher = false;\n  }\n\n  let path = typeof to === \"string\" ? to : createPath(to); // Return location verbatim on non-submission navigations\n\n  if (!opts || !(\"formMethod\" in opts) && !(\"formData\" in opts)) {\n    return {\n      path\n    };\n  } // Create a Submission on non-GET navigations\n\n\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createServerHref(parsePath(path)),\n        formEncType: opts && opts.formEncType || \"application/x-www-form-urlencoded\",\n        formData: opts.formData\n      }\n    };\n  } // No formData to flatten for GET submission\n\n\n  if (!opts.formData) {\n    return {\n      path\n    };\n  } // Flatten submission onto URLSearchParams for GET submissions\n\n\n  let parsedPath = parsePath(path);\n\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData); // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n\n    if (isFetcher && parsedPath.search && hasNakedIndexQuery(parsedPath.search)) {\n      searchParams.append(\"index\", \"\");\n    }\n\n    parsedPath.search = \"?\" + searchParams;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(400, \"Bad Request\", \"Cannot submit binary form data using GET\")\n    };\n  }\n\n  return {\n    path: createPath(parsedPath)\n  };\n}\n\nfunction getLoaderRedirect(state, redirect) {\n  let {\n    formMethod,\n    formAction,\n    formEncType,\n    formData\n  } = state.navigation;\n  let navigation = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined\n  };\n  return navigation;\n} // Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\n\n\nfunction getLoaderMatchesUntilBoundary(matches, boundaryId) {\n  let boundaryMatches = matches;\n\n  if (boundaryId) {\n    let index = matches.findIndex(m => m.route.id === boundaryId);\n\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(state, matches, submission, location, isRevalidationRequired, cancelledDeferredRoutes, cancelledFetcherLoads, pendingActionData, pendingError, fetchLoadMatches) {\n  let actionResult = pendingError ? Object.values(pendingError)[0] : pendingActionData ? Object.values(pendingActionData)[0] : null; // Pick navigation matches that are net-new or qualify for revalidation\n\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter((match, index) => match.route.loader != null && (isNewLoader(state.loaderData, state.matches[index], match) || // If this route had a pending deferred cancelled it must be revalidated\n  cancelledDeferredRoutes.some(id => id === match.route.id) || shouldRevalidateLoader(state.location, state.matches[index], submission, location, match, isRevalidationRequired, actionResult))); // Pick fetcher.loads that need to be revalidated\n\n  let revalidatingFetchers = [];\n  fetchLoadMatches && fetchLoadMatches.forEach((_ref10, key) => {\n    let [href, match, fetchMatches] = _ref10; // This fetcher was cancelled from a prior action submission - force reload\n\n    if (cancelledFetcherLoads.includes(key)) {\n      revalidatingFetchers.push([key, href, match, fetchMatches]);\n    } else if (isRevalidationRequired) {\n      let shouldRevalidate = shouldRevalidateLoader(href, match, submission, href, match, isRevalidationRequired, actionResult);\n\n      if (shouldRevalidate) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      }\n    }\n  });\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(currentLoaderData, currentMatch, match) {\n  let isNew = // [a] -> [a, b]\n  !currentMatch || // [a, b] -> [a, c]\n  match.route.id !== currentMatch.route.id; // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n\n  let isMissingData = currentLoaderData[match.route.id] === undefined; // Always load if this is a net-new route or we don't yet have data\n\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(currentMatch, match) {\n  let currentPath = currentMatch.route.path;\n  return (// param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname || // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    currentPath && currentPath.endsWith(\"*\") && currentMatch.params[\"*\"] !== match.params[\"*\"]\n  );\n}\n\nfunction shouldRevalidateLoader(currentLocation, currentMatch, submission, location, match, isRevalidationRequired, actionResult) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params; // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n\n  let defaultShouldRevalidate = isNewRouteInstance(currentMatch, match) || // Clicked the same link, resubmitted a GET form\n  currentUrl.toString() === nextUrl.toString() || // Search params affect all loaders\n  currentUrl.search !== nextUrl.search || // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n  isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate(_extends({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams\n    }, submission, {\n      actionResult,\n      defaultShouldRevalidate\n    }));\n\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(type, request, match, matches, basename, isStaticRequest, isRouteRequest) {\n  if (isStaticRequest === void 0) {\n    isStaticRequest = false;\n  }\n\n  if (isRouteRequest === void 0) {\n    isRouteRequest = false;\n  }\n\n  let resultType;\n  let result; // Setup a promise we can race against so that abort signals short circuit\n\n  let reject;\n  let abortPromise = new Promise((_, r) => reject = r);\n\n  let onReject = () => reject();\n\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant(handler, \"Could not find the \" + type + \" to run on the \\\"\" + match.route.id + \"\\\" route\");\n    result = await Promise.race([handler({\n      request,\n      params: match.params\n    }), abortPromise]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    let status = result.status; // Process redirects\n\n    if (status >= 300 && status <= 399) {\n      let location = result.headers.get(\"Location\");\n      invariant(location, \"Redirects returned/thrown from loaders/actions must have a Location header\"); // Support relative routing in redirects\n\n      let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n      let routePathnames = getPathContributingMatches(activeMatches).map(match => match.pathnameBase);\n      let requestPath = createURL(request.url).pathname;\n      let resolvedLocation = resolveTo(location, routePathnames, requestPath);\n      invariant(createPath(resolvedLocation), \"Unable to resolve redirect location: \" + result.headers.get(\"Location\")); // Prepend the basename to the redirect location if we have one\n\n      if (basename) {\n        let path = resolvedLocation.pathname;\n        resolvedLocation.pathname = path === \"/\" ? basename : joinPaths([basename, path]);\n      }\n\n      location = createPath(resolvedLocation); // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null\n      };\n    } // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n\n\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result\n      };\n    }\n\n    let data;\n    let contentType = result.headers.get(\"Content-Type\");\n\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return {\n      type: resultType,\n      error: result\n    };\n  }\n\n  if (result instanceof DeferredData) {\n    return {\n      type: ResultType.deferred,\n      deferredData: result\n    };\n  }\n\n  return {\n    type: ResultType.data,\n    data: result\n  };\n}\n\nfunction createRequest(location, signal, submission) {\n  let url = createURL(location).toString();\n  let init = {\n    signal\n  };\n\n  if (submission) {\n    let {\n      formMethod,\n      formEncType,\n      formData\n    } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body = formEncType === \"application/x-www-form-urlencoded\" ? convertFormDataToSearchParams(formData) : formData;\n  } // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n\n\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData) {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(typeof value === \"string\", 'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' + 'please use \"multipart/form-data\" instead.');\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds) {\n  // Fill in loaderData/errors from our loaders\n  let loaderData = {};\n  let errors = null;\n  let statusCode;\n  let foundError = false;\n  let loaderHeaders = {}; // Process loader results into state.loaderData/state.errors\n\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(!isRedirectResult(result), \"Cannot handle redirect results in processLoaderData\");\n\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error; // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error\n      }); // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error) ? result.error.status : 500;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data; // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data; // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n\n      if (result.statusCode != null && result.statusCode !== 200 && !foundError) {\n        statusCode = result.statusCode;\n      }\n\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  }); // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders\n  };\n}\n\nfunction processLoaderData(state, matches, matchesToLoad, results, pendingError, revalidatingFetchers, fetcherResults, activeDeferreds) {\n  let {\n    loaderData,\n    errors\n  } = processRouteLoaderData(matches, matchesToLoad, results, pendingError, activeDeferreds); // Process results from our revalidating fetchers\n\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key,, match] = revalidatingFetchers[index];\n    invariant(fetcherResults !== undefined && fetcherResults[index] !== undefined, \"Did not find corresponding fetcher result\");\n    let result = fetcherResults[index]; // Process fetcher non-redirect errors\n\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = _extends({}, errors, {\n          [boundaryMatch.route.id]: result.error\n        });\n      }\n\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return {\n    loaderData,\n    errors\n  };\n}\n\nfunction mergeLoaderData(loaderData, newLoaderData, matches) {\n  let mergedLoaderData = _extends({}, newLoaderData);\n\n  matches.forEach(match => {\n    let id = match.route.id;\n\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n} // Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\n\n\nfunction findNearestBoundary(matches, routeId) {\n  let eligibleMatches = routeId ? matches.slice(0, matches.findIndex(m => m.route.id === routeId) + 1) : [...matches];\n  return eligibleMatches.reverse().find(m => m.route.hasErrorBoundary === true) || matches[0];\n}\n\nfunction getShortCircuitMatches(routes, status, statusText) {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find(r => r.index || !r.path || r.path === \"/\") || {\n    id: \"__shim-\" + status + \"-route__\"\n  };\n  return {\n    matches: [{\n      params: {},\n      pathname: \"\",\n      pathnameBase: \"\",\n      route\n    }],\n    route,\n    error: new ErrorResponse(status, statusText, null)\n  };\n}\n\nfunction getNotFoundMatches(routes) {\n  return getShortCircuitMatches(routes, 404, \"Not Found\");\n}\n\nfunction getMethodNotAllowedMatches(routes) {\n  return getShortCircuitMatches(routes, 405, \"Method Not Allowed\");\n}\n\nfunction getMethodNotAllowedResult(path) {\n  let href = typeof path === \"string\" ? path : createServerHref(path);\n  console.warn(\"You're trying to submit to a route that does not have an action.  To \" + \"fix this, please add an `action` function to the route for \" + (\"[\" + href + \"]\"));\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"\")\n  };\n} // Find any returned redirect errors, starting from the lowest match\n\n\nfunction findRedirect(results) {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n} // Create an href to represent a \"server\" URL without the hash\n\n\nfunction createServerHref(location) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a, b) {\n  return a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash;\n}\n\nfunction isDeferredResult(result) {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result) {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result) {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isRedirectResponse(result) {\n  if (!(result instanceof Response)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj) {\n  return obj && obj.response instanceof Response && (obj.type === ResultType.data || ResultType.error);\n}\n\nasync function resolveDeferredResults(currentMatches, matchesToLoad, results, signal, isFetcher, currentLoaderData) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(m => m.route.id === match.route.id);\n    let isRevalidatingLoader = currentMatch != null && !isNewRouteInstance(currentMatch, match) && (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then(result => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(result, signal, unwrap) {\n  if (unwrap === void 0) {\n    unwrap = false;\n  }\n\n  let aborted = await result.deferredData.resolveData(signal);\n\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data\n  };\n}\n\nfunction hasNakedIndexQuery(search) {\n  return new URLSearchParams(search).getAll(\"index\").some(v => v === \"\");\n} // Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\n\n\nfunction createUseMatchesMatch(match, loaderData) {\n  let {\n    route,\n    pathname,\n    params\n  } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id],\n    handle: route.handle\n  };\n}\n\nfunction getTargetMatch(matches, location) {\n  let search = typeof location === \"string\" ? parsePath(location).search : location.search;\n\n  if (matches[matches.length - 1].route.index && hasNakedIndexQuery(search || \"\")) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  } // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n\n\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction createURL(location) {\n  let base = typeof window !== \"undefined\" && typeof window.location !== \"undefined\" ? window.location.origin : \"unknown://unknown\";\n  let href = typeof location === \"string\" ? location : createServerHref(location);\n  return new URL(href, base);\n} //#endregion\n\n\nexport { AbortedDeferredError, Action, ErrorResponse, IDLE_FETCHER, IDLE_NAVIGATION, convertRoutesToDataRoutes as UNSAFE_convertRoutesToDataRoutes, getPathContributingMatches as UNSAFE_getPathContributingMatches, createBrowserHistory, createHashHistory, createMemoryHistory, createPath, createRouter, defer, generatePath, getStaticContextFromError, getToPathname, invariant, isRouteErrorResponse, joinPaths, json, matchPath, matchRoutes, normalizePathname, parsePath, redirect, resolvePath, resolveTo, stripBasename, unstable_createStaticHandler, warning };","map":{"version":3,"mappings":"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","names":["Action","PopStateEventType","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","history","createHref","createPath","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserLocation","window","globalHistory","search","hash","usr","createBrowserHref","getUrlBasedHistory","createHashLocation","parsePath","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","cond","message","console","warn","Error","e","createKey","random","toString","getHistoryState","current","_ref","path","parsedPath","searchIndex","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","invariant","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","forEach","meta","relativePath","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","_","prefix","__","str","star","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","value","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","includes","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","pendingKeys","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","isRouteErrorResponse","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","isBrowser","createElement","isServer","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getNotFoundMatches","initialized","m","loader","hydrationData","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","createURL","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","handleLoaders","result","actionMatch","getTargetMatch","getMethodNotAllowedResult","callLoaderOrAction","isRedirectResult","redirectNavigation","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","matchesToLoad","revalidatingFetchers","getMatchesToLoad","routeId","fetcher","revalidatingFetcher","_ref3","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","_ref4","findRedirect","getLoaderRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","_ref5","staleKey","_ref6","_ref7","doneFetcher","resolveDeferredData","redirectHistoryAction","currentMatches","fetchersToLoad","all","_ref8","fetchMatches","resolveDeferredResults","_ref9","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","validActionMethods","validRequestMethods","unstable_createStaticHandler","query","URL","method","methodNotAllowedMatches","getMethodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","queryRoute","createRouterErrorResponse","find","values","routeData","routeMatch","submit","loadRouteData","isQueryRouteResponse","type","isRedirectResponse","response","isRouteRequest","createServerHref","Location","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","body","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isFetcher","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","_ref10","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","isStaticRequest","resultType","onReject","handler","activeMatches","requestPath","resolvedLocation","contentType","text","deferred","toUpperCase","Request","URLSearchParams","foundError","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","getShortCircuitMatches","obj","isRevalidatingLoader","unwrap","getAll","handle","pathMatches","origin"],"sources":["C:\\Users\\ahmed.eldessouki\\Documents\\REACT.JS\\elbernameg\\elbernameg\\node_modules\\@remix-run\\router\\history.ts","C:\\Users\\ahmed.eldessouki\\Documents\\REACT.JS\\elbernameg\\elbernameg\\node_modules\\@remix-run\\router\\utils.ts","C:\\Users\\ahmed.eldessouki\\Documents\\REACT.JS\\elbernameg\\elbernameg\\node_modules\\@remix-run\\router\\router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `${string}:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // incoming pathnames are always encoded from either window.location or\n      // from route.navigate, but we want to match against the unencoded paths\n      // in the route definitions\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  path: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(request: Request): Promise<StaticHandlerContext | Response>;\n  queryRoute(request: Request, routeId?: string): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouteMatch, DataRouteMatch[]] for a revalidating\n * fetcher.load()\n */\ntype RevalidatingFetcher = [\n  string,\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Tuple of [href, DataRouteMatch, DataRouteMatch[]] for an active\n * fetcher.load()\n */\ntype FetchLoadMatch = [\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let { matches, route, error } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\" &&\n      state.navigation.formAction?.split(\"?\")[0] === location.pathname;\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    let url = createURL(createPath(location));\n    location = {\n      ...location,\n      pathname: url.pathname,\n      search: url.search,\n      hash: url.hash,\n    };\n\n    let historyAction =\n      (opts && opts.replace) === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createRequest(\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      await startRedirectNavigation(\n        result,\n        redirectNavigation,\n        opts && opts.replace\n      );\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let { error } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[]\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation,\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map(([, href, match, fetchMatches]) =>\n        callLoaderOrAction(\n          \"loader\",\n          createRequest(href, request.signal),\n          match,\n          fetchMatches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nconst validActionMethods = new Set([\"POST\", \"PUT\", \"PATCH\", \"DELETE\"]);\nconst validRequestMethods = new Set([\"GET\", \"HEAD\", ...validActionMethods]);\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[]\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      let {\n        matches: methodNotAllowedMatches,\n        route,\n        error,\n      } = getMethodNotAllowedMatches(dataRoutes);\n      return {\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    } else if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    let result = await queryImpl(request, location, matches);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated thrown Response (such as a\n   * 404 or 405) will have a custom X-Remix-Router-Error: \"yes\" header on it\n   * in order to differentiate from responses thrown from user actions/loaders.\n   */\n  async function queryRoute(request: Request, routeId?: string): Promise<any> {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      throw createRouterErrorResponse(null, {\n        status: 405,\n        statusText: \"Method Not Allowed\",\n      });\n    } else if (!matches) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\",\n      });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (!match) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\",\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, match);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.actionData, result.loaderData].find((v) => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (validActionMethods.has(request.method)) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, routeMatch);\n      return result instanceof Response\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    let result: DataResult;\n    if (!actionMatch.route.action) {\n      let href = createServerHref(new URL(request.url));\n      if (isRouteRequest) {\n        throw createRouterErrorResponse(null, {\n          status: 405,\n          statusText: \"Method Not Allowed\",\n        });\n      }\n      result = getMethodNotAllowedResult(href);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        undefined, // Basename not currently supported in static handlers\n        true,\n        isRouteRequest\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error,\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {},\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, undefined, {\n        [boundaryMatch.route.id]: result.error,\n      });\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(request, matches);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<StaticHandlerContext, \"location\" | \"actionData\" | \"actionHeaders\">\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          undefined, // Basename not currently supported in static handlers\n          true,\n          isRouteRequest\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  function createRouterErrorResponse(\n    body: BodyInit | null | undefined,\n    init: ResponseInit\n  ) {\n    return new Response(body, {\n      ...init,\n      headers: {\n        ...init.headers,\n        \"X-Remix-Router-Error\": \"yes\",\n      },\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || (!(\"formMethod\" in opts) && !(\"formData\" in opts))) {\n    return { path };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createServerHref(parsePath(path)),\n        formEncType:\n          (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // No formData to flatten for GET submission\n  if (!opts.formData) {\n    return { path };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(\n        400,\n        \"Bad Request\",\n        \"Cannot submit binary form data using GET\"\n      ),\n    };\n  }\n\n  return { path: createPath(parsedPath) };\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match, fetchMatches], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match, fetchMatches]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename: string | undefined,\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params }),\n      abortPromise,\n    ]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    let status = result.status;\n\n    // Process redirects\n    if (status >= 300 && status <= 399) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in redirects\n      let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n      let routePathnames = getPathContributingMatches(activeMatches).map(\n        (match) => match.pathnameBase\n      );\n      let requestPath = createURL(request.url).pathname;\n      let resolvedLocation = resolveTo(location, routePathnames, requestPath);\n      invariant(\n        createPath(resolvedLocation),\n        `Unable to resolve redirect location: ${result.headers.get(\"Location\")}`\n      );\n\n      // Prepend the basename to the redirect location if we have one\n      if (basename) {\n        let path = resolvedLocation.pathname;\n        resolvedLocation.pathname =\n          path === \"/\" ? basename : joinPaths([basename, path]);\n      }\n\n      location = createPath(resolvedLocation);\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createURL(location).toString();\n  let init: RequestInit = { signal };\n\n  if (submission) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(\n  routes: AgnosticDataRouteObject[],\n  status: number,\n  statusText: string\n): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n  error: ErrorResponse;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-${status}-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n    error: new ErrorResponse(status, statusText, null),\n  };\n}\n\nfunction getNotFoundMatches(routes: AgnosticDataRouteObject[]) {\n  return getShortCircuitMatches(routes, 404, \"Not Found\");\n}\n\nfunction getMethodNotAllowedMatches(routes: AgnosticDataRouteObject[]) {\n  return getShortCircuitMatches(routes, 405, \"Method Not Allowed\");\n}\n\nfunction getMethodNotAllowedResult(path: Location | string): ErrorResult {\n  let href = typeof path === \"string\" ? path : createServerHref(path);\n  console.warn(\n    \"You're trying to submit to a route that does not have an action.  To \" +\n      \"fix this, please add an `action` function to the route for \" +\n      `[${href}]`\n  );\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"\"),\n  };\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\n// Create an href to represent a \"server\" URL without the hash\nfunction createServerHref(location: Partial<Path> | Location | URL) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!(result instanceof Response)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    obj.response instanceof Response &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction createURL(location: Location | string): URL {\n  let base =\n    typeof window !== \"undefined\" && typeof window.location !== \"undefined\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href =\n    typeof location === \"string\" ? location : createServerHref(location);\n  return new URL(href, base);\n}\n//#endregion\n"]},"metadata":{},"sourceType":"module"}