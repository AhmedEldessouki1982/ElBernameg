{"version":3,"file":"router.umd.min.js","sources":["../history.ts","../utils.ts","../router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `${string}:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // incoming pathnames are always encoded from either window.location or\n      // from route.navigate, but we want to match against the unencoded paths\n      // in the route definitions\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  path: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(request: Request): Promise<StaticHandlerContext | Response>;\n  queryRoute(request: Request, routeId?: string): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouteMatch, DataRouteMatch[]] for a revalidating\n * fetcher.load()\n */\ntype RevalidatingFetcher = [\n  string,\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Tuple of [href, DataRouteMatch, DataRouteMatch[]] for an active\n * fetcher.load()\n */\ntype FetchLoadMatch = [\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let { matches, route, error } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\" &&\n      state.navigation.formAction?.split(\"?\")[0] === location.pathname;\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    let url = createURL(createPath(location));\n    location = {\n      ...location,\n      pathname: url.pathname,\n      search: url.search,\n      hash: url.hash,\n    };\n\n    let historyAction =\n      (opts && opts.replace) === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createRequest(\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      await startRedirectNavigation(\n        result,\n        redirectNavigation,\n        opts && opts.replace\n      );\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let { error } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[]\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation,\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map(([, href, match, fetchMatches]) =>\n        callLoaderOrAction(\n          \"loader\",\n          createRequest(href, request.signal),\n          match,\n          fetchMatches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nconst validActionMethods = new Set([\"POST\", \"PUT\", \"PATCH\", \"DELETE\"]);\nconst validRequestMethods = new Set([\"GET\", \"HEAD\", ...validActionMethods]);\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[]\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      let {\n        matches: methodNotAllowedMatches,\n        route,\n        error,\n      } = getMethodNotAllowedMatches(dataRoutes);\n      return {\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    } else if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    let result = await queryImpl(request, location, matches);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated thrown Response (such as a\n   * 404 or 405) will have a custom X-Remix-Router-Error: \"yes\" header on it\n   * in order to differentiate from responses thrown from user actions/loaders.\n   */\n  async function queryRoute(request: Request, routeId?: string): Promise<any> {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      throw createRouterErrorResponse(null, {\n        status: 405,\n        statusText: \"Method Not Allowed\",\n      });\n    } else if (!matches) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\",\n      });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (!match) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\",\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, match);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.actionData, result.loaderData].find((v) => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (validActionMethods.has(request.method)) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, routeMatch);\n      return result instanceof Response\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    let result: DataResult;\n    if (!actionMatch.route.action) {\n      let href = createServerHref(new URL(request.url));\n      if (isRouteRequest) {\n        throw createRouterErrorResponse(null, {\n          status: 405,\n          statusText: \"Method Not Allowed\",\n        });\n      }\n      result = getMethodNotAllowedResult(href);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        undefined, // Basename not currently supported in static handlers\n        true,\n        isRouteRequest\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error,\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {},\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, undefined, {\n        [boundaryMatch.route.id]: result.error,\n      });\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(request, matches);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<StaticHandlerContext, \"location\" | \"actionData\" | \"actionHeaders\">\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          undefined, // Basename not currently supported in static handlers\n          true,\n          isRouteRequest\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  function createRouterErrorResponse(\n    body: BodyInit | null | undefined,\n    init: ResponseInit\n  ) {\n    return new Response(body, {\n      ...init,\n      headers: {\n        ...init.headers,\n        \"X-Remix-Router-Error\": \"yes\",\n      },\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || (!(\"formMethod\" in opts) && !(\"formData\" in opts))) {\n    return { path };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createServerHref(parsePath(path)),\n        formEncType:\n          (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // No formData to flatten for GET submission\n  if (!opts.formData) {\n    return { path };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(\n        400,\n        \"Bad Request\",\n        \"Cannot submit binary form data using GET\"\n      ),\n    };\n  }\n\n  return { path: createPath(parsedPath) };\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match, fetchMatches], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match, fetchMatches]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename: string | undefined,\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params }),\n      abortPromise,\n    ]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    let status = result.status;\n\n    // Process redirects\n    if (status >= 300 && status <= 399) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in redirects\n      let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n      let routePathnames = getPathContributingMatches(activeMatches).map(\n        (match) => match.pathnameBase\n      );\n      let requestPath = createURL(request.url).pathname;\n      let resolvedLocation = resolveTo(location, routePathnames, requestPath);\n      invariant(\n        createPath(resolvedLocation),\n        `Unable to resolve redirect location: ${result.headers.get(\"Location\")}`\n      );\n\n      // Prepend the basename to the redirect location if we have one\n      if (basename) {\n        let path = resolvedLocation.pathname;\n        resolvedLocation.pathname =\n          path === \"/\" ? basename : joinPaths([basename, path]);\n      }\n\n      location = createPath(resolvedLocation);\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createURL(location).toString();\n  let init: RequestInit = { signal };\n\n  if (submission) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(\n  routes: AgnosticDataRouteObject[],\n  status: number,\n  statusText: string\n): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n  error: ErrorResponse;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-${status}-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n    error: new ErrorResponse(status, statusText, null),\n  };\n}\n\nfunction getNotFoundMatches(routes: AgnosticDataRouteObject[]) {\n  return getShortCircuitMatches(routes, 404, \"Not Found\");\n}\n\nfunction getMethodNotAllowedMatches(routes: AgnosticDataRouteObject[]) {\n  return getShortCircuitMatches(routes, 405, \"Method Not Allowed\");\n}\n\nfunction getMethodNotAllowedResult(path: Location | string): ErrorResult {\n  let href = typeof path === \"string\" ? path : createServerHref(path);\n  console.warn(\n    \"You're trying to submit to a route that does not have an action.  To \" +\n      \"fix this, please add an `action` function to the route for \" +\n      `[${href}]`\n  );\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"\"),\n  };\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\n// Create an href to represent a \"server\" URL without the hash\nfunction createServerHref(location: Partial<Path> | Location | URL) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!(result instanceof Response)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    obj.response instanceof Response &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction createURL(location: Location | string): URL {\n  let base =\n    typeof window !== \"undefined\" && typeof window.location !== \"undefined\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href =\n    typeof location === \"string\" ? location : createServerHref(location);\n  return new URL(href, base);\n}\n//#endregion\n"],"names":["Action","exports","PopStateEventType","warning","cond","message","console","warn","Error","e","getHistoryState","location","usr","state","key","createLocation","current","to","_extends","pathname","search","hash","parsePath","Math","random","toString","substr","createPath","_ref","charAt","path","parsedPath","hashIndex","indexOf","searchIndex","getUrlBasedHistory","getLocation","createHref","validateLocation","options","window","document","defaultView","v5Compat","globalHistory","history","action","Pop","listener","handlePop","listen","fn","addEventListener","removeEventListener","push","Push","historyState","url","pushState","error","assign","replace","Replace","replaceState","go","n","ResultType","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","map","route","index","treePath","id","join","invariant","children","has","add","isIndexRoute","undefined","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","sort","a","b","score","length","slice","every","i","compareIndexes","routesMeta","meta","childrenIndex","rankRouteBranches","matches","matchRouteBranch","safelyDecodeURI","parentsMeta","forEach","relativePath","caseSensitive","startsWith","joinPaths","concat","computeScore","paramRe","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","pattern","matcher","paramNames","endsWith","regexpSource","_","paramName","RegExp","compilePath","captureGroups","memo","splatValue","value","decodeURIComponent","safelyDecodeURIComponent","decodeURI","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","pop","resolvePathname","normalizeSearch","normalizeHash","getInvalidPathError","char","field","dest","JSON","stringify","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","includes","from","isEmptyPath","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","paths","AbortedDeferredError","DeferredData","constructor","data","reject","this","pendingKeys","subscriber","Array","isArray","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","entries","acc","trackPromise","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","abort","v","k","async","resolve","size","unwrappedData","_ref2","unwrapTrackedPromise","_tracked","isTrackedPromise","_error","_data","ErrorResponse","status","statusText","isRouteErrorResponse","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","isServer","createElement","validActionMethods","validRequestMethods","normalizeNavigateOptions","opts","isFetcher","submission","createServerHref","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","getLoaderRedirect","redirect","navigation","getLoaderMatchesUntilBoundary","boundaryId","boundaryMatches","findIndex","m","getMatchesToLoad","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","pendingActionData","pendingError","fetchLoadMatches","actionResult","values","navigationMatches","keys","loader","currentLoaderData","currentMatch","isNew","isMissingData","isNewLoader","loaderData","shouldRevalidateLoader","revalidatingFetchers","_ref10","href","fetchMatches","isNewRouteInstance","currentPath","currentLocation","currentUrl","createURL","currentParams","nextUrl","nextParams","defaultShouldRevalidate","shouldRevalidate","routeChoice","callLoaderOrAction","type","request","isStaticRequest","isRouteRequest","resultType","result","onReject","handler","Response","headers","resolvedLocation","set","revalidate","response","contentType","json","text","statusCode","deferred","deferredData","createRequest","init","method","toUpperCase","body","Request","URLSearchParams","processRouteLoaderData","matchesToLoad","results","activeDeferreds","errors","foundError","loaderHeaders","isRedirectResult","isErrorResult","boundaryMatch","findNearestBoundary","isDeferredResult","processLoaderData","fetcherResults","fetchers","doneFetcher","mergeLoaderData","newLoaderData","mergedLoaderData","routeId","reverse","find","hasErrorBoundary","getShortCircuitMatches","getNotFoundMatches","getMethodNotAllowedResult","findRedirect","isRedirectResponse","resolveDeferredResults","currentMatches","isRevalidatingLoader","resolveDeferredData","unwrap","resolveData","getAll","createUseMatchesMatch","handle","getTargetMatch","pathMatches","base","origin","URL","querySelector","getAttribute","initialEntries","initialIndex","entry","createMemoryLocation","clampIndex","min","max","getCurrentLocation","nextLocation","splice","delta","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","router","pendingNavigationController","initialized","hydrationData","historyAction","restoreScrollPosition","preventScrollReset","revalidation","actionData","Map","pendingAction","HistoryAction","pendingPreventScrollReset","isUninterruptedRevalidation","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","updateState","newState","completeNavigation","_state$navigation$for","isActionReload","getSavedScrollPosition","startNavigation","startUninterruptedRevalidation","userMatches","saveScrollPosition","loadingNavigation","overrideNavigation","notFoundMatches","cancelActiveDeferreds","actionOutput","interruptActiveLoads","actionMatch","shortCircuited","redirectNavigation","startRedirectNavigation","pendingActionError","handleAction","fetcher","revalidatingFetcher","_ref3","loaderResults","callLoadersAndMaybeResolveData","_ref4","doneKeys","markFetchersDone","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","handleLoaders","getFetcher","redirectHistoryAction","fetchersToLoad","all","_ref8","_ref9","abortFetcher","setFetcherError","deleteFetcher","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","y","initialize","enableScrollRestoration","positions","getPosition","getKey","navigate","fetch","requestMatches","existingFetcher","abortController","fetchRequest","loadingFetcher","revalidationRequest","loadId","loadFetcher","_ref5","staleKey","_ref6","_ref7","handleFetcherAction","handleFetcherLoader","dispose","clear","_internalFetchControllers","_internalActiveDeferreds","prefix","__","str","context","_deepestRenderedBoundaryId","responseInit","Headers","queryImpl","routeMatch","createRouterErrorResponse","Location","actionHeaders","loadRouteData","submit","obj","query","methodNotAllowedMatches","getMethodNotAllowedMatches","queryRoute","routeData"],"mappings":"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"}