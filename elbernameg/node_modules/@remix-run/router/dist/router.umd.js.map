{"version":3,"file":"router.umd.js","sources":["../history.ts","../utils.ts","../router.ts"],"sourcesContent":["////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Actions represent the type of change to a location value.\n */\nexport enum Action {\n  /**\n   * A POP indicates a change to an arbitrary index in the history stack, such\n   * as a back or forward navigation. It does not describe the direction of the\n   * navigation, only that the current index changed.\n   *\n   * Note: This is the default action for newly created history objects.\n   */\n  Pop = \"POP\",\n\n  /**\n   * A PUSH indicates a new entry being added to the history stack, such as when\n   * a link is clicked and a new page loads. When this happens, all subsequent\n   * entries in the stack are lost.\n   */\n  Push = \"PUSH\",\n\n  /**\n   * A REPLACE indicates the entry at the current index in the history stack\n   * being replaced by a new one.\n   */\n  Replace = \"REPLACE\",\n}\n\n/**\n * The pathname, search, and hash values of a URL.\n */\nexport interface Path {\n  /**\n   * A URL pathname, beginning with a /.\n   */\n  pathname: string;\n\n  /**\n   * A URL search string, beginning with a ?.\n   */\n  search: string;\n\n  /**\n   * A URL fragment identifier, beginning with a #.\n   */\n  hash: string;\n}\n\n/**\n * An entry in a history stack. A location contains information about the\n * URL path, as well as possibly some arbitrary state and a key.\n */\nexport interface Location extends Path {\n  /**\n   * A value of arbitrary data associated with this location.\n   */\n  state: any;\n\n  /**\n   * A unique string associated with this location. May be used to safely store\n   * and retrieve data in some other storage API, like `localStorage`.\n   *\n   * Note: This value is always \"default\" on the initial location.\n   */\n  key: string;\n}\n\n/**\n * A change to the current location.\n */\nexport interface Update {\n  /**\n   * The action that triggered the change.\n   */\n  action: Action;\n\n  /**\n   * The new location.\n   */\n  location: Location;\n}\n\n/**\n * A function that receives notifications about location changes.\n */\nexport interface Listener {\n  (update: Update): void;\n}\n\n/**\n * Describes a location that is the destination of some navigation, either via\n * `history.push` or `history.replace`. May be either a URL or the pieces of a\n * URL path.\n */\nexport type To = string | Partial<Path>;\n\n/**\n * A history is an interface to the navigation stack. The history serves as the\n * source of truth for the current location, as well as provides a set of\n * methods that may be used to change it.\n *\n * It is similar to the DOM's `window.history` object, but with a smaller, more\n * focused API.\n */\nexport interface History {\n  /**\n   * The last action that modified the current location. This will always be\n   * Action.Pop when a history instance is first created. This value is mutable.\n   */\n  readonly action: Action;\n\n  /**\n   * The current location. This value is mutable.\n   */\n  readonly location: Location;\n\n  /**\n   * Returns a valid href for the given `to` value that may be used as\n   * the value of an <a href> attribute.\n   *\n   * @param to - The destination URL\n   */\n  createHref(to: To): string;\n\n  /**\n   * Pushes a new location onto the history stack, increasing its length by one.\n   * If there were any entries in the stack after the current one, they are\n   * lost.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  push(to: To, state?: any): void;\n\n  /**\n   * Replaces the current location in the history stack with a new one.  The\n   * location that was replaced will no longer be available.\n   *\n   * @param to - The new URL\n   * @param state - Data to associate with the new location\n   */\n  replace(to: To, state?: any): void;\n\n  /**\n   * Navigates `n` entries backward/forward in the history stack relative to the\n   * current index. For example, a \"back\" navigation would use go(-1).\n   *\n   * @param delta - The delta in the stack index\n   */\n  go(delta: number): void;\n\n  /**\n   * Sets up a listener that will be called whenever the current location\n   * changes.\n   *\n   * @param listener - A function that will be called when the location changes\n   * @returns unlisten - A function that may be used to stop listening\n   */\n  listen(listener: Listener): () => void;\n}\n\ntype HistoryState = {\n  usr: any;\n  key?: string;\n};\n\nconst PopStateEventType = \"popstate\";\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Memory History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A user-supplied object that describes a location. Used when providing\n * entries to `createMemoryHistory` via its `initialEntries` option.\n */\nexport type InitialEntry = string | Partial<Location>;\n\nexport type MemoryHistoryOptions = {\n  initialEntries?: InitialEntry[];\n  initialIndex?: number;\n  v5Compat?: boolean;\n};\n\n/**\n * A memory history stores locations in memory. This is useful in stateful\n * environments where there is no web browser, such as node tests or React\n * Native.\n */\nexport interface MemoryHistory extends History {\n  /**\n   * The current index in the history stack.\n   */\n  readonly index: number;\n}\n\n/**\n * Memory history stores the current location in memory. It is designed for use\n * in stateful non-browser environments like tests and React Native.\n */\nexport function createMemoryHistory(\n  options: MemoryHistoryOptions = {}\n): MemoryHistory {\n  let { initialEntries = [\"/\"], initialIndex, v5Compat = false } = options;\n  let entries: Location[]; // Declare so we can access from createMemoryLocation\n  entries = initialEntries.map((entry, index) =>\n    createMemoryLocation(\n      entry,\n      typeof entry === \"string\" ? null : entry.state,\n      index === 0 ? \"default\" : undefined\n    )\n  );\n  let index = clampIndex(\n    initialIndex == null ? entries.length - 1 : initialIndex\n  );\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function clampIndex(n: number): number {\n    return Math.min(Math.max(n, 0), entries.length - 1);\n  }\n  function getCurrentLocation(): Location {\n    return entries[index];\n  }\n  function createMemoryLocation(\n    to: To,\n    state: any = null,\n    key?: string\n  ): Location {\n    let location = createLocation(\n      entries ? getCurrentLocation().pathname : \"/\",\n      to,\n      state,\n      key\n    );\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in memory history: ${JSON.stringify(\n        to\n      )}`\n    );\n    return location;\n  }\n\n  let history: MemoryHistory = {\n    get index() {\n      return index;\n    },\n    get action() {\n      return action;\n    },\n    get location() {\n      return getCurrentLocation();\n    },\n    createHref(to) {\n      return typeof to === \"string\" ? to : createPath(to);\n    },\n    push(to, state) {\n      action = Action.Push;\n      let nextLocation = createMemoryLocation(to, state);\n      index += 1;\n      entries.splice(index, entries.length, nextLocation);\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    replace(to, state) {\n      action = Action.Replace;\n      let nextLocation = createMemoryLocation(to, state);\n      entries[index] = nextLocation;\n      if (v5Compat && listener) {\n        listener({ action, location: nextLocation });\n      }\n    },\n    go(delta) {\n      action = Action.Pop;\n      index = clampIndex(index + delta);\n      if (listener) {\n        listener({ action, location: getCurrentLocation() });\n      }\n    },\n    listen(fn: Listener) {\n      listener = fn;\n      return () => {\n        listener = null;\n      };\n    },\n  };\n\n  return history;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Browser History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A browser history stores the current location in regular URLs in a web\n * browser environment. This is the standard for most web apps and provides the\n * cleanest URLs the browser's address bar.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#browserhistory\n */\nexport interface BrowserHistory extends UrlHistory {}\n\nexport type BrowserHistoryOptions = UrlHistoryOptions;\n\n/**\n * Browser history stores the location in regular URLs. This is the standard for\n * most web apps, but it requires some configuration on the server to ensure you\n * serve the same app at multiple URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createbrowserhistory\n */\nexport function createBrowserHistory(\n  options: BrowserHistoryOptions = {}\n): BrowserHistory {\n  function createBrowserLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let { pathname, search, hash } = window.location;\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createBrowserHref(window: Window, to: To) {\n    return typeof to === \"string\" ? to : createPath(to);\n  }\n\n  return getUrlBasedHistory(\n    createBrowserLocation,\n    createBrowserHref,\n    null,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Hash History\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A hash history stores the current location in the fragment identifier portion\n * of the URL in a web browser environment.\n *\n * This is ideal for apps that do not control the server for some reason\n * (because the fragment identifier is never sent to the server), including some\n * shared hosting environments that do not provide fine-grained controls over\n * which pages are served at which URLs.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#hashhistory\n */\nexport interface HashHistory extends UrlHistory {}\n\nexport type HashHistoryOptions = UrlHistoryOptions;\n\n/**\n * Hash history stores the location in window.location.hash. This makes it ideal\n * for situations where you don't want to send the location to the server for\n * some reason, either because you do cannot configure it or the URL space is\n * reserved for something else.\n *\n * @see https://github.com/remix-run/history/tree/main/docs/api-reference.md#createhashhistory\n */\nexport function createHashHistory(\n  options: HashHistoryOptions = {}\n): HashHistory {\n  function createHashLocation(\n    window: Window,\n    globalHistory: Window[\"history\"]\n  ) {\n    let {\n      pathname = \"/\",\n      search = \"\",\n      hash = \"\",\n    } = parsePath(window.location.hash.substr(1));\n    return createLocation(\n      \"\",\n      { pathname, search, hash },\n      // state defaults to `null` because `window.history.state` does\n      (globalHistory.state && globalHistory.state.usr) || null,\n      (globalHistory.state && globalHistory.state.key) || \"default\"\n    );\n  }\n\n  function createHashHref(window: Window, to: To) {\n    let base = window.document.querySelector(\"base\");\n    let href = \"\";\n\n    if (base && base.getAttribute(\"href\")) {\n      let url = window.location.href;\n      let hashIndex = url.indexOf(\"#\");\n      href = hashIndex === -1 ? url : url.slice(0, hashIndex);\n    }\n\n    return href + \"#\" + (typeof to === \"string\" ? to : createPath(to));\n  }\n\n  function validateHashLocation(location: Location, to: To) {\n    warning(\n      location.pathname.charAt(0) === \"/\",\n      `relative pathnames are not supported in hash history.push(${JSON.stringify(\n        to\n      )})`\n    );\n  }\n\n  return getUrlBasedHistory(\n    createHashLocation,\n    createHashHref,\n    validateHashLocation,\n    options\n  );\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region UTILS\n////////////////////////////////////////////////////////////////////////////////\n\nfunction warning(cond: any, message: string) {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging history!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\nfunction createKey() {\n  return Math.random().toString(36).substr(2, 8);\n}\n\n/**\n * For browser-based histories, we combine the state and key into an object\n */\nfunction getHistoryState(location: Location): HistoryState {\n  return {\n    usr: location.state,\n    key: location.key,\n  };\n}\n\n/**\n * Creates a Location object with a unique key from the given Path\n */\nexport function createLocation(\n  current: string | Location,\n  to: To,\n  state: any = null,\n  key?: string\n): Readonly<Location> {\n  let location: Readonly<Location> = {\n    pathname: typeof current === \"string\" ? current : current.pathname,\n    search: \"\",\n    hash: \"\",\n    ...(typeof to === \"string\" ? parsePath(to) : to),\n    state,\n    // TODO: This could be cleaned up.  push/replace should probably just take\n    // full Locations now and avoid the need to run through this flow at all\n    // But that's a pretty big refactor to the current test suite so going to\n    // keep as is for the time being and just let any incoming keys take precedence\n    key: (to && (to as Location).key) || key || createKey(),\n  };\n  return location;\n}\n\n/**\n * Creates a string URL path from the given pathname, search, and hash components.\n */\nexport function createPath({\n  pathname = \"/\",\n  search = \"\",\n  hash = \"\",\n}: Partial<Path>) {\n  if (search && search !== \"?\")\n    pathname += search.charAt(0) === \"?\" ? search : \"?\" + search;\n  if (hash && hash !== \"#\")\n    pathname += hash.charAt(0) === \"#\" ? hash : \"#\" + hash;\n  return pathname;\n}\n\n/**\n * Parses a string URL path into its separate pathname, search, and hash components.\n */\nexport function parsePath(path: string): Partial<Path> {\n  let parsedPath: Partial<Path> = {};\n\n  if (path) {\n    let hashIndex = path.indexOf(\"#\");\n    if (hashIndex >= 0) {\n      parsedPath.hash = path.substr(hashIndex);\n      path = path.substr(0, hashIndex);\n    }\n\n    let searchIndex = path.indexOf(\"?\");\n    if (searchIndex >= 0) {\n      parsedPath.search = path.substr(searchIndex);\n      path = path.substr(0, searchIndex);\n    }\n\n    if (path) {\n      parsedPath.pathname = path;\n    }\n  }\n\n  return parsedPath;\n}\n\nexport interface UrlHistory extends History {}\n\nexport type UrlHistoryOptions = {\n  window?: Window;\n  v5Compat?: boolean;\n};\n\nfunction getUrlBasedHistory(\n  getLocation: (window: Window, globalHistory: Window[\"history\"]) => Location,\n  createHref: (window: Window, to: To) => string,\n  validateLocation: ((location: Location, to: To) => void) | null,\n  options: UrlHistoryOptions = {}\n): UrlHistory {\n  let { window = document.defaultView!, v5Compat = false } = options;\n  let globalHistory = window.history;\n  let action = Action.Pop;\n  let listener: Listener | null = null;\n\n  function handlePop() {\n    action = Action.Pop;\n    if (listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function push(to: To, state?: any) {\n    action = Action.Push;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n\n    // try...catch because iOS limits us to 100 pushState calls :/\n    try {\n      globalHistory.pushState(historyState, \"\", url);\n    } catch (error) {\n      // They are going to lose state here, but there is no real\n      // way to warn them about it since the page will refresh...\n      window.location.assign(url);\n    }\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  function replace(to: To, state?: any) {\n    action = Action.Replace;\n    let location = createLocation(history.location, to, state);\n    if (validateLocation) validateLocation(location, to);\n\n    let historyState = getHistoryState(location);\n    let url = history.createHref(location);\n    globalHistory.replaceState(historyState, \"\", url);\n\n    if (v5Compat && listener) {\n      listener({ action, location: history.location });\n    }\n  }\n\n  let history: History = {\n    get action() {\n      return action;\n    },\n    get location() {\n      return getLocation(window, globalHistory);\n    },\n    listen(fn: Listener) {\n      if (listener) {\n        throw new Error(\"A history only accepts one active listener\");\n      }\n      window.addEventListener(PopStateEventType, handlePop);\n      listener = fn;\n\n      return () => {\n        window.removeEventListener(PopStateEventType, handlePop);\n        listener = null;\n      };\n    },\n    createHref(to) {\n      return createHref(window, to);\n    },\n    push,\n    replace,\n    go(n) {\n      return globalHistory.go(n);\n    },\n  };\n\n  return history;\n}\n\n//#endregion\n","import type { Location, Path, To } from \"./history\";\nimport { parsePath } from \"./history\";\n\n/**\n * Map of routeId -> data returned from a loader/action/error\n */\nexport interface RouteData {\n  [routeId: string]: any;\n}\n\nexport enum ResultType {\n  data = \"data\",\n  deferred = \"deferred\",\n  redirect = \"redirect\",\n  error = \"error\",\n}\n\n/**\n * Successful result from a loader or action\n */\nexport interface SuccessResult {\n  type: ResultType.data;\n  data: any;\n  statusCode?: number;\n  headers?: Headers;\n}\n\n/**\n * Successful defer() result from a loader or action\n */\nexport interface DeferredResult {\n  type: ResultType.deferred;\n  deferredData: DeferredData;\n}\n\n/**\n * Redirect result from a loader or action\n */\nexport interface RedirectResult {\n  type: ResultType.redirect;\n  status: number;\n  location: string;\n  revalidate: boolean;\n}\n\n/**\n * Unsuccessful result from a loader or action\n */\nexport interface ErrorResult {\n  type: ResultType.error;\n  error: any;\n  headers?: Headers;\n}\n\n/**\n * Result from a loader or action - potentially successful or unsuccessful\n */\nexport type DataResult =\n  | SuccessResult\n  | DeferredResult\n  | RedirectResult\n  | ErrorResult;\n\nexport type FormMethod = \"get\" | \"post\" | \"put\" | \"patch\" | \"delete\";\nexport type FormEncType =\n  | \"application/x-www-form-urlencoded\"\n  | \"multipart/form-data\";\n\n/**\n * @private\n * Internal interface to pass around for action submissions, not intended for\n * external consumption\n */\nexport interface Submission {\n  formMethod: Exclude<FormMethod, \"get\">;\n  formAction: string;\n  formEncType: FormEncType;\n  formData: FormData;\n}\n\n/**\n * @private\n * Arguments passed to route loader/action functions.  Same for now but we keep\n * this as a private implementation detail in case they diverge in the future.\n */\ninterface DataFunctionArgs {\n  request: Request;\n  params: Params;\n}\n\n/**\n * Arguments passed to loader functions\n */\nexport interface LoaderFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Arguments passed to action functions\n */\nexport interface ActionFunctionArgs extends DataFunctionArgs {}\n\n/**\n * Route loader function signature\n */\nexport interface LoaderFunction {\n  (args: LoaderFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route action function signature\n */\nexport interface ActionFunction {\n  (args: ActionFunctionArgs): Promise<Response> | Response | Promise<any> | any;\n}\n\n/**\n * Route shouldRevalidate function signature.  This runs after any submission\n * (navigation or fetcher), so we flatten the navigation/fetcher submission\n * onto the arguments.  It shouldn't matter whether it came from a navigation\n * or a fetcher, what really matters is the URLs and the formData since loaders\n * have to re-run based on the data models that were potentially mutated.\n */\nexport interface ShouldRevalidateFunction {\n  (args: {\n    currentUrl: URL;\n    currentParams: AgnosticDataRouteMatch[\"params\"];\n    nextUrl: URL;\n    nextParams: AgnosticDataRouteMatch[\"params\"];\n    formMethod?: Submission[\"formMethod\"];\n    formAction?: Submission[\"formAction\"];\n    formEncType?: Submission[\"formEncType\"];\n    formData?: Submission[\"formData\"];\n    actionResult?: DataResult;\n    defaultShouldRevalidate: boolean;\n  }): boolean;\n}\n\n/**\n * Base RouteObject with common props shared by all types of routes\n */\ntype AgnosticBaseRouteObject = {\n  caseSensitive?: boolean;\n  path?: string;\n  id?: string;\n  loader?: LoaderFunction;\n  action?: ActionFunction;\n  hasErrorBoundary?: boolean;\n  shouldRevalidate?: ShouldRevalidateFunction;\n  handle?: any;\n};\n\n/**\n * Index routes must not have children\n */\nexport type AgnosticIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: undefined;\n  index: true;\n};\n\n/**\n * Non-index routes may have children, but cannot have index\n */\nexport type AgnosticNonIndexRouteObject = AgnosticBaseRouteObject & {\n  children?: AgnosticRouteObject[];\n  index?: false;\n};\n\n/**\n * A route object represents a logical route, with (optionally) its child\n * routes organized in a tree-like structure.\n */\nexport type AgnosticRouteObject =\n  | AgnosticIndexRouteObject\n  | AgnosticNonIndexRouteObject;\n\nexport type AgnosticDataIndexRouteObject = AgnosticIndexRouteObject & {\n  id: string;\n};\n\nexport type AgnosticDataNonIndexRouteObject = AgnosticNonIndexRouteObject & {\n  children?: AgnosticDataRouteObject[];\n  id: string;\n};\n\n/**\n * A data route object, which is just a RouteObject with a required unique ID\n */\nexport type AgnosticDataRouteObject =\n  | AgnosticDataIndexRouteObject\n  | AgnosticDataNonIndexRouteObject;\n\n// Recursive helper for finding path parameters in the absence of wildcards\ntype _PathParam<Path extends string> =\n  // split path into individual path segments\n  Path extends `${infer L}/${infer R}`\n    ? _PathParam<L> | _PathParam<R>\n    : // find params after `:`\n    Path extends `${string}:${infer Param}`\n    ? Param\n    : // otherwise, there aren't any params present\n      never;\n\n/**\n * Examples:\n * \"/a/b/*\" -> \"*\"\n * \":a\" -> \"a\"\n * \"/a/:b\" -> \"b\"\n * \"/a/blahblahblah:b\" -> \"b\"\n * \"/:a/:b\" -> \"a\" | \"b\"\n * \"/:a/b/:c/*\" -> \"a\" | \"c\" | \"*\"\n */\ntype PathParam<Path extends string> =\n  // check if path is just a wildcard\n  Path extends \"*\"\n    ? \"*\"\n    : // look for wildcard at the end of the path\n    Path extends `${infer Rest}/*`\n    ? \"*\" | _PathParam<Rest>\n    : // look for params in the absence of wildcards\n      _PathParam<Path>;\n\n// Attempt to parse the given string segment. If it fails, then just return the\n// plain string type as a default fallback. Otherwise return the union of the\n// parsed string literals that were referenced as dynamic segments in the route.\nexport type ParamParseKey<Segment extends string> =\n  // if could not find path params, fallback to `string`\n  [PathParam<Segment>] extends [never] ? string : PathParam<Segment>;\n\n/**\n * The parameters that were parsed from the URL path.\n */\nexport type Params<Key extends string = string> = {\n  readonly [key in Key]: string | undefined;\n};\n\n/**\n * A RouteMatch contains info about how a route matched a URL.\n */\nexport interface AgnosticRouteMatch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The route object that was used to match.\n   */\n  route: RouteObjectType;\n}\n\nexport interface AgnosticDataRouteMatch\n  extends AgnosticRouteMatch<string, AgnosticDataRouteObject> {}\n\nfunction isIndexRoute(\n  route: AgnosticRouteObject\n): route is AgnosticIndexRouteObject {\n  return route.index === true;\n}\n\n// Walk the route tree generating unique IDs where necessary so we are working\n// solely with AgnosticDataRouteObject's within the Router\nexport function convertRoutesToDataRoutes(\n  routes: AgnosticRouteObject[],\n  parentPath: number[] = [],\n  allIds: Set<string> = new Set<string>()\n): AgnosticDataRouteObject[] {\n  return routes.map((route, index) => {\n    let treePath = [...parentPath, index];\n    let id = typeof route.id === \"string\" ? route.id : treePath.join(\"-\");\n    invariant(\n      route.index !== true || !route.children,\n      `Cannot specify children on an index route`\n    );\n    invariant(\n      !allIds.has(id),\n      `Found a route id collision on id \"${id}\".  Route ` +\n        \"id's must be globally unique within Data Router usages\"\n    );\n    allIds.add(id);\n\n    if (isIndexRoute(route)) {\n      let indexRoute: AgnosticDataIndexRouteObject = { ...route, id };\n      return indexRoute;\n    } else {\n      let pathOrLayoutRoute: AgnosticDataNonIndexRouteObject = {\n        ...route,\n        id,\n        children: route.children\n          ? convertRoutesToDataRoutes(route.children, treePath, allIds)\n          : undefined,\n      };\n      return pathOrLayoutRoute;\n    }\n  });\n}\n\n/**\n * Matches the given routes to a location and returns the match data.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-routes\n */\nexport function matchRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  locationArg: Partial<Location> | string,\n  basename = \"/\"\n): AgnosticRouteMatch<string, RouteObjectType>[] | null {\n  let location =\n    typeof locationArg === \"string\" ? parsePath(locationArg) : locationArg;\n\n  let pathname = stripBasename(location.pathname || \"/\", basename);\n\n  if (pathname == null) {\n    return null;\n  }\n\n  let branches = flattenRoutes(routes);\n  rankRouteBranches(branches);\n\n  let matches = null;\n  for (let i = 0; matches == null && i < branches.length; ++i) {\n    matches = matchRouteBranch<string, RouteObjectType>(\n      branches[i],\n      // incoming pathnames are always encoded from either window.location or\n      // from route.navigate, but we want to match against the unencoded paths\n      // in the route definitions\n      safelyDecodeURI(pathname)\n    );\n  }\n\n  return matches;\n}\n\ninterface RouteMeta<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  relativePath: string;\n  caseSensitive: boolean;\n  childrenIndex: number;\n  route: RouteObjectType;\n}\n\ninterface RouteBranch<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n> {\n  path: string;\n  score: number;\n  routesMeta: RouteMeta<RouteObjectType>[];\n}\n\nfunction flattenRoutes<\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  routes: RouteObjectType[],\n  branches: RouteBranch<RouteObjectType>[] = [],\n  parentsMeta: RouteMeta<RouteObjectType>[] = [],\n  parentPath = \"\"\n): RouteBranch<RouteObjectType>[] {\n  routes.forEach((route, index) => {\n    let meta: RouteMeta<RouteObjectType> = {\n      relativePath: route.path || \"\",\n      caseSensitive: route.caseSensitive === true,\n      childrenIndex: index,\n      route,\n    };\n\n    if (meta.relativePath.startsWith(\"/\")) {\n      invariant(\n        meta.relativePath.startsWith(parentPath),\n        `Absolute route path \"${meta.relativePath}\" nested under path ` +\n          `\"${parentPath}\" is not valid. An absolute child route path ` +\n          `must start with the combined path of all its parent routes.`\n      );\n\n      meta.relativePath = meta.relativePath.slice(parentPath.length);\n    }\n\n    let path = joinPaths([parentPath, meta.relativePath]);\n    let routesMeta = parentsMeta.concat(meta);\n\n    // Add the children before adding this route to the array so we traverse the\n    // route tree depth-first and child routes appear before their parents in\n    // the \"flattened\" version.\n    if (route.children && route.children.length > 0) {\n      invariant(\n        // Our types know better, but runtime JS may not!\n        // @ts-expect-error\n        route.index !== true,\n        `Index routes must not have child routes. Please remove ` +\n          `all child routes from route path \"${path}\".`\n      );\n\n      flattenRoutes(route.children, branches, routesMeta, path);\n    }\n\n    // Routes without a path shouldn't ever match by themselves unless they are\n    // index routes, so don't add them to the list of possible branches.\n    if (route.path == null && !route.index) {\n      return;\n    }\n\n    branches.push({ path, score: computeScore(path, route.index), routesMeta });\n  });\n\n  return branches;\n}\n\nfunction rankRouteBranches(branches: RouteBranch[]): void {\n  branches.sort((a, b) =>\n    a.score !== b.score\n      ? b.score - a.score // Higher score first\n      : compareIndexes(\n          a.routesMeta.map((meta) => meta.childrenIndex),\n          b.routesMeta.map((meta) => meta.childrenIndex)\n        )\n  );\n}\n\nconst paramRe = /^:\\w+$/;\nconst dynamicSegmentValue = 3;\nconst indexRouteValue = 2;\nconst emptySegmentValue = 1;\nconst staticSegmentValue = 10;\nconst splatPenalty = -2;\nconst isSplat = (s: string) => s === \"*\";\n\nfunction computeScore(path: string, index: boolean | undefined): number {\n  let segments = path.split(\"/\");\n  let initialScore = segments.length;\n  if (segments.some(isSplat)) {\n    initialScore += splatPenalty;\n  }\n\n  if (index) {\n    initialScore += indexRouteValue;\n  }\n\n  return segments\n    .filter((s) => !isSplat(s))\n    .reduce(\n      (score, segment) =>\n        score +\n        (paramRe.test(segment)\n          ? dynamicSegmentValue\n          : segment === \"\"\n          ? emptySegmentValue\n          : staticSegmentValue),\n      initialScore\n    );\n}\n\nfunction compareIndexes(a: number[], b: number[]): number {\n  let siblings =\n    a.length === b.length && a.slice(0, -1).every((n, i) => n === b[i]);\n\n  return siblings\n    ? // If two routes are siblings, we should try to match the earlier sibling\n      // first. This allows people to have fine-grained control over the matching\n      // behavior by simply putting routes with identical paths in the order they\n      // want them tried.\n      a[a.length - 1] - b[b.length - 1]\n    : // Otherwise, it doesn't really make sense to rank non-siblings by index,\n      // so they sort equally.\n      0;\n}\n\nfunction matchRouteBranch<\n  ParamKey extends string = string,\n  RouteObjectType extends AgnosticRouteObject = AgnosticRouteObject\n>(\n  branch: RouteBranch<RouteObjectType>,\n  pathname: string\n): AgnosticRouteMatch<ParamKey, RouteObjectType>[] | null {\n  let { routesMeta } = branch;\n\n  let matchedParams = {};\n  let matchedPathname = \"/\";\n  let matches: AgnosticRouteMatch<ParamKey, RouteObjectType>[] = [];\n  for (let i = 0; i < routesMeta.length; ++i) {\n    let meta = routesMeta[i];\n    let end = i === routesMeta.length - 1;\n    let remainingPathname =\n      matchedPathname === \"/\"\n        ? pathname\n        : pathname.slice(matchedPathname.length) || \"/\";\n    let match = matchPath(\n      { path: meta.relativePath, caseSensitive: meta.caseSensitive, end },\n      remainingPathname\n    );\n\n    if (!match) return null;\n\n    Object.assign(matchedParams, match.params);\n\n    let route = meta.route;\n\n    matches.push({\n      // TODO: Can this as be avoided?\n      params: matchedParams as Params<ParamKey>,\n      pathname: joinPaths([matchedPathname, match.pathname]),\n      pathnameBase: normalizePathname(\n        joinPaths([matchedPathname, match.pathnameBase])\n      ),\n      route,\n    });\n\n    if (match.pathnameBase !== \"/\") {\n      matchedPathname = joinPaths([matchedPathname, match.pathnameBase]);\n    }\n  }\n\n  return matches;\n}\n\n/**\n * Returns a path with params interpolated.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/generate-path\n */\nexport function generatePath<Path extends string>(\n  path: Path,\n  params: {\n    [key in PathParam<Path>]: string;\n  } = {} as any\n): string {\n  return path\n    .replace(/:(\\w+)/g, (_, key: PathParam<Path>) => {\n      invariant(params[key] != null, `Missing \":${key}\" param`);\n      return params[key]!;\n    })\n    .replace(/(\\/?)\\*/, (_, prefix, __, str) => {\n      const star = \"*\" as PathParam<Path>;\n\n      if (params[star] == null) {\n        // If no splat was provided, trim the trailing slash _unless_ it's\n        // the entire path\n        return str === \"/*\" ? \"/\" : \"\";\n      }\n\n      // Apply the splat\n      return `${prefix}${params[star]}`;\n    });\n}\n\n/**\n * A PathPattern is used to match on some portion of a URL pathname.\n */\nexport interface PathPattern<Path extends string = string> {\n  /**\n   * A string to match against a URL pathname. May contain `:id`-style segments\n   * to indicate placeholders for dynamic parameters. May also end with `/*` to\n   * indicate matching the rest of the URL pathname.\n   */\n  path: Path;\n  /**\n   * Should be `true` if the static portions of the `path` should be matched in\n   * the same case.\n   */\n  caseSensitive?: boolean;\n  /**\n   * Should be `true` if this pattern should match the entire URL pathname.\n   */\n  end?: boolean;\n}\n\n/**\n * A PathMatch contains info about how a PathPattern matched on a URL pathname.\n */\nexport interface PathMatch<ParamKey extends string = string> {\n  /**\n   * The names and values of dynamic parameters in the URL.\n   */\n  params: Params<ParamKey>;\n  /**\n   * The portion of the URL pathname that was matched.\n   */\n  pathname: string;\n  /**\n   * The portion of the URL pathname that was matched before child routes.\n   */\n  pathnameBase: string;\n  /**\n   * The pattern that was used to match.\n   */\n  pattern: PathPattern;\n}\n\ntype Mutable<T> = {\n  -readonly [P in keyof T]: T[P];\n};\n\n/**\n * Performs pattern matching on a URL pathname and returns information about\n * the match.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/match-path\n */\nexport function matchPath<\n  ParamKey extends ParamParseKey<Path>,\n  Path extends string\n>(\n  pattern: PathPattern<Path> | Path,\n  pathname: string\n): PathMatch<ParamKey> | null {\n  if (typeof pattern === \"string\") {\n    pattern = { path: pattern, caseSensitive: false, end: true };\n  }\n\n  let [matcher, paramNames] = compilePath(\n    pattern.path,\n    pattern.caseSensitive,\n    pattern.end\n  );\n\n  let match = pathname.match(matcher);\n  if (!match) return null;\n\n  let matchedPathname = match[0];\n  let pathnameBase = matchedPathname.replace(/(.)\\/+$/, \"$1\");\n  let captureGroups = match.slice(1);\n  let params: Params = paramNames.reduce<Mutable<Params>>(\n    (memo, paramName, index) => {\n      // We need to compute the pathnameBase here using the raw splat value\n      // instead of using params[\"*\"] later because it will be decoded then\n      if (paramName === \"*\") {\n        let splatValue = captureGroups[index] || \"\";\n        pathnameBase = matchedPathname\n          .slice(0, matchedPathname.length - splatValue.length)\n          .replace(/(.)\\/+$/, \"$1\");\n      }\n\n      memo[paramName] = safelyDecodeURIComponent(\n        captureGroups[index] || \"\",\n        paramName\n      );\n      return memo;\n    },\n    {}\n  );\n\n  return {\n    params,\n    pathname: matchedPathname,\n    pathnameBase,\n    pattern,\n  };\n}\n\nfunction compilePath(\n  path: string,\n  caseSensitive = false,\n  end = true\n): [RegExp, string[]] {\n  warning(\n    path === \"*\" || !path.endsWith(\"*\") || path.endsWith(\"/*\"),\n    `Route path \"${path}\" will be treated as if it were ` +\n      `\"${path.replace(/\\*$/, \"/*\")}\" because the \\`*\\` character must ` +\n      `always follow a \\`/\\` in the pattern. To get rid of this warning, ` +\n      `please change the route path to \"${path.replace(/\\*$/, \"/*\")}\".`\n  );\n\n  let paramNames: string[] = [];\n  let regexpSource =\n    \"^\" +\n    path\n      .replace(/\\/*\\*?$/, \"\") // Ignore trailing / and /*, we'll handle it below\n      .replace(/^\\/*/, \"/\") // Make sure it has a leading /\n      .replace(/[\\\\.*+^$?{}|()[\\]]/g, \"\\\\$&\") // Escape special regex chars\n      .replace(/:(\\w+)/g, (_: string, paramName: string) => {\n        paramNames.push(paramName);\n        return \"([^\\\\/]+)\";\n      });\n\n  if (path.endsWith(\"*\")) {\n    paramNames.push(\"*\");\n    regexpSource +=\n      path === \"*\" || path === \"/*\"\n        ? \"(.*)$\" // Already matched the initial /, just match the rest\n        : \"(?:\\\\/(.+)|\\\\/*)$\"; // Don't include the / in params[\"*\"]\n  } else if (end) {\n    // When matching to the end, ignore trailing slashes\n    regexpSource += \"\\\\/*$\";\n  } else if (path !== \"\" && path !== \"/\") {\n    // If our path is non-empty and contains anything beyond an initial slash,\n    // then we have _some_ form of path in our regex so we should expect to\n    // match only if we find the end of this path segment.  Look for an optional\n    // non-captured trailing slash (to match a portion of the URL) or the end\n    // of the path (if we've matched to the end).  We used to do this with a\n    // word boundary but that gives false positives on routes like\n    // /user-preferences since `-` counts as a word boundary.\n    regexpSource += \"(?:(?=\\\\/|$))\";\n  } else {\n    // Nothing to match for \"\" or \"/\"\n  }\n\n  let matcher = new RegExp(regexpSource, caseSensitive ? undefined : \"i\");\n\n  return [matcher, paramNames];\n}\n\nfunction safelyDecodeURI(value: string) {\n  try {\n    return decodeURI(value);\n  } catch (error) {\n    warning(\n      false,\n      `The URL path \"${value}\" could not be decoded because it is is a ` +\n        `malformed URL segment. This is probably due to a bad percent ` +\n        `encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\nfunction safelyDecodeURIComponent(value: string, paramName: string) {\n  try {\n    return decodeURIComponent(value);\n  } catch (error) {\n    warning(\n      false,\n      `The value for the URL param \"${paramName}\" will not be decoded because` +\n        ` the string \"${value}\" is a malformed URL segment. This is probably` +\n        ` due to a bad percent encoding (${error}).`\n    );\n\n    return value;\n  }\n}\n\n/**\n * @private\n */\nexport function stripBasename(\n  pathname: string,\n  basename: string\n): string | null {\n  if (basename === \"/\") return pathname;\n\n  if (!pathname.toLowerCase().startsWith(basename.toLowerCase())) {\n    return null;\n  }\n\n  // We want to leave trailing slash behavior in the user's control, so if they\n  // specify a basename with a trailing slash, we should support it\n  let startIndex = basename.endsWith(\"/\")\n    ? basename.length - 1\n    : basename.length;\n  let nextChar = pathname.charAt(startIndex);\n  if (nextChar && nextChar !== \"/\") {\n    // pathname does not start with basename/\n    return null;\n  }\n\n  return pathname.slice(startIndex) || \"/\";\n}\n\n/**\n * @private\n */\nexport function invariant(value: boolean, message?: string): asserts value;\nexport function invariant<T>(\n  value: T | null | undefined,\n  message?: string\n): asserts value is T;\nexport function invariant(value: any, message?: string) {\n  if (value === false || value === null || typeof value === \"undefined\") {\n    throw new Error(message);\n  }\n}\n\n/**\n * @private\n */\nexport function warning(cond: any, message: string): void {\n  if (!cond) {\n    // eslint-disable-next-line no-console\n    if (typeof console !== \"undefined\") console.warn(message);\n\n    try {\n      // Welcome to debugging React Router!\n      //\n      // This error is thrown as a convenience so you can more easily\n      // find the source for a warning that appears in the console by\n      // enabling \"pause on exceptions\" in your JavaScript debugger.\n      throw new Error(message);\n      // eslint-disable-next-line no-empty\n    } catch (e) {}\n  }\n}\n\n/**\n * Returns a resolved path object relative to the given pathname.\n *\n * @see https://reactrouter.com/docs/en/v6/utils/resolve-path\n */\nexport function resolvePath(to: To, fromPathname = \"/\"): Path {\n  let {\n    pathname: toPathname,\n    search = \"\",\n    hash = \"\",\n  } = typeof to === \"string\" ? parsePath(to) : to;\n\n  let pathname = toPathname\n    ? toPathname.startsWith(\"/\")\n      ? toPathname\n      : resolvePathname(toPathname, fromPathname)\n    : fromPathname;\n\n  return {\n    pathname,\n    search: normalizeSearch(search),\n    hash: normalizeHash(hash),\n  };\n}\n\nfunction resolvePathname(relativePath: string, fromPathname: string): string {\n  let segments = fromPathname.replace(/\\/+$/, \"\").split(\"/\");\n  let relativeSegments = relativePath.split(\"/\");\n\n  relativeSegments.forEach((segment) => {\n    if (segment === \"..\") {\n      // Keep the root \"\" segment so the pathname starts at /\n      if (segments.length > 1) segments.pop();\n    } else if (segment !== \".\") {\n      segments.push(segment);\n    }\n  });\n\n  return segments.length > 1 ? segments.join(\"/\") : \"/\";\n}\n\nfunction getInvalidPathError(\n  char: string,\n  field: string,\n  dest: string,\n  path: Partial<Path>\n) {\n  return (\n    `Cannot include a '${char}' character in a manually specified ` +\n    `\\`to.${field}\\` field [${JSON.stringify(\n      path\n    )}].  Please separate it out to the ` +\n    `\\`to.${dest}\\` field. Alternatively you may provide the full path as ` +\n    `a string in <Link to=\"...\"> and the router will parse it for you.`\n  );\n}\n\n/**\n * @private\n *\n * When processing relative navigation we want to ignore ancestor routes that\n * do not contribute to the path, such that index/pathless layout routes don't\n * interfere.\n *\n * For example, when moving a route element into an index route and/or a\n * pathless layout route, relative link behavior contained within should stay\n * the same.  Both of the following examples should link back to the root:\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\" element={<Link to=\"..\"}>\n *   </Route>\n *\n *   <Route path=\"/\">\n *     <Route path=\"accounts\">\n *       <Route element={<AccountsLayout />}>       // <-- Does not contribute\n *         <Route index element={<Link to=\"..\"} />  // <-- Does not contribute\n *       </Route\n *     </Route>\n *   </Route>\n */\nexport function getPathContributingMatches<\n  T extends AgnosticRouteMatch = AgnosticRouteMatch\n>(matches: T[]) {\n  return matches.filter(\n    (match, index) =>\n      index === 0 || (match.route.path && match.route.path.length > 0)\n  );\n}\n\n/**\n * @private\n */\nexport function resolveTo(\n  toArg: To,\n  routePathnames: string[],\n  locationPathname: string,\n  isPathRelative = false\n): Path {\n  let to: Partial<Path>;\n  if (typeof toArg === \"string\") {\n    to = parsePath(toArg);\n  } else {\n    to = { ...toArg };\n\n    invariant(\n      !to.pathname || !to.pathname.includes(\"?\"),\n      getInvalidPathError(\"?\", \"pathname\", \"search\", to)\n    );\n    invariant(\n      !to.pathname || !to.pathname.includes(\"#\"),\n      getInvalidPathError(\"#\", \"pathname\", \"hash\", to)\n    );\n    invariant(\n      !to.search || !to.search.includes(\"#\"),\n      getInvalidPathError(\"#\", \"search\", \"hash\", to)\n    );\n  }\n\n  let isEmptyPath = toArg === \"\" || to.pathname === \"\";\n  let toPathname = isEmptyPath ? \"/\" : to.pathname;\n\n  let from: string;\n\n  // Routing is relative to the current pathname if explicitly requested.\n  //\n  // If a pathname is explicitly provided in `to`, it should be relative to the\n  // route context. This is explained in `Note on `<Link to>` values` in our\n  // migration guide from v5 as a means of disambiguation between `to` values\n  // that begin with `/` and those that do not. However, this is problematic for\n  // `to` values that do not provide a pathname. `to` can simply be a search or\n  // hash string, in which case we should assume that the navigation is relative\n  // to the current location's pathname and *not* the route pathname.\n  if (isPathRelative || toPathname == null) {\n    from = locationPathname;\n  } else {\n    let routePathnameIndex = routePathnames.length - 1;\n\n    if (toPathname.startsWith(\"..\")) {\n      let toSegments = toPathname.split(\"/\");\n\n      // Each leading .. segment means \"go up one route\" instead of \"go up one\n      // URL segment\".  This is a key difference from how <a href> works and a\n      // major reason we call this a \"to\" value instead of a \"href\".\n      while (toSegments[0] === \"..\") {\n        toSegments.shift();\n        routePathnameIndex -= 1;\n      }\n\n      to.pathname = toSegments.join(\"/\");\n    }\n\n    // If there are more \"..\" segments than parent routes, resolve relative to\n    // the root / URL.\n    from = routePathnameIndex >= 0 ? routePathnames[routePathnameIndex] : \"/\";\n  }\n\n  let path = resolvePath(to, from);\n\n  // Ensure the pathname has a trailing slash if the original \"to\" had one\n  let hasExplicitTrailingSlash =\n    toPathname && toPathname !== \"/\" && toPathname.endsWith(\"/\");\n  // Or if this was a link to the current path which has a trailing slash\n  let hasCurrentTrailingSlash =\n    (isEmptyPath || toPathname === \".\") && locationPathname.endsWith(\"/\");\n  if (\n    !path.pathname.endsWith(\"/\") &&\n    (hasExplicitTrailingSlash || hasCurrentTrailingSlash)\n  ) {\n    path.pathname += \"/\";\n  }\n\n  return path;\n}\n\n/**\n * @private\n */\nexport function getToPathname(to: To): string | undefined {\n  // Empty strings should be treated the same as / paths\n  return to === \"\" || (to as Path).pathname === \"\"\n    ? \"/\"\n    : typeof to === \"string\"\n    ? parsePath(to).pathname\n    : to.pathname;\n}\n\n/**\n * @private\n */\nexport const joinPaths = (paths: string[]): string =>\n  paths.join(\"/\").replace(/\\/\\/+/g, \"/\");\n\n/**\n * @private\n */\nexport const normalizePathname = (pathname: string): string =>\n  pathname.replace(/\\/+$/, \"\").replace(/^\\/*/, \"/\");\n\n/**\n * @private\n */\nexport const normalizeSearch = (search: string): string =>\n  !search || search === \"?\"\n    ? \"\"\n    : search.startsWith(\"?\")\n    ? search\n    : \"?\" + search;\n\n/**\n * @private\n */\nexport const normalizeHash = (hash: string): string =>\n  !hash || hash === \"#\" ? \"\" : hash.startsWith(\"#\") ? hash : \"#\" + hash;\n\nexport type JsonFunction = <Data>(\n  data: Data,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * This is a shortcut for creating `application/json` responses. Converts `data`\n * to JSON and sets the `Content-Type` header.\n */\nexport const json: JsonFunction = (data, init = {}) => {\n  let responseInit = typeof init === \"number\" ? { status: init } : init;\n\n  let headers = new Headers(responseInit.headers);\n  if (!headers.has(\"Content-Type\")) {\n    headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n  }\n\n  return new Response(JSON.stringify(data), {\n    ...responseInit,\n    headers,\n  });\n};\n\nexport interface TrackedPromise extends Promise<any> {\n  _tracked?: boolean;\n  _data?: any;\n  _error?: any;\n}\n\nexport class AbortedDeferredError extends Error {}\n\nexport class DeferredData {\n  private pendingKeys: Set<string | number> = new Set<string | number>();\n  private controller: AbortController;\n  private abortPromise: Promise<void>;\n  private unlistenAbortSignal: () => void;\n  private subscriber?: (aborted: boolean) => void = undefined;\n  data: Record<string, unknown>;\n\n  constructor(data: Record<string, unknown>) {\n    invariant(\n      data && typeof data === \"object\" && !Array.isArray(data),\n      \"defer() only accepts plain objects\"\n    );\n\n    // Set up an AbortController + Promise we can race against to exit early\n    // cancellation\n    let reject: (e: AbortedDeferredError) => void;\n    this.abortPromise = new Promise((_, r) => (reject = r));\n    this.controller = new AbortController();\n    let onAbort = () =>\n      reject(new AbortedDeferredError(\"Deferred data aborted\"));\n    this.unlistenAbortSignal = () =>\n      this.controller.signal.removeEventListener(\"abort\", onAbort);\n    this.controller.signal.addEventListener(\"abort\", onAbort);\n\n    this.data = Object.entries(data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: this.trackPromise(key, value),\n        }),\n      {}\n    );\n  }\n\n  private trackPromise(\n    key: string | number,\n    value: Promise<unknown> | unknown\n  ): TrackedPromise | unknown {\n    if (!(value instanceof Promise)) {\n      return value;\n    }\n\n    this.pendingKeys.add(key);\n\n    // We store a little wrapper promise that will be extended with\n    // _data/_error props upon resolve/reject\n    let promise: TrackedPromise = Promise.race([value, this.abortPromise]).then(\n      (data) => this.onSettle(promise, key, null, data as unknown),\n      (error) => this.onSettle(promise, key, error as unknown)\n    );\n\n    // Register rejection listeners to avoid uncaught promise rejections on\n    // errors or aborted deferred values\n    promise.catch(() => {});\n\n    Object.defineProperty(promise, \"_tracked\", { get: () => true });\n    return promise;\n  }\n\n  private onSettle(\n    promise: TrackedPromise,\n    key: string | number,\n    error: unknown,\n    data?: unknown\n  ): unknown {\n    if (\n      this.controller.signal.aborted &&\n      error instanceof AbortedDeferredError\n    ) {\n      this.unlistenAbortSignal();\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      return Promise.reject(error);\n    }\n\n    this.pendingKeys.delete(key);\n\n    if (this.done) {\n      // Nothing left to abort!\n      this.unlistenAbortSignal();\n    }\n\n    const subscriber = this.subscriber;\n    if (error) {\n      Object.defineProperty(promise, \"_error\", { get: () => error });\n      subscriber && subscriber(false);\n      return Promise.reject(error);\n    }\n\n    Object.defineProperty(promise, \"_data\", { get: () => data });\n    subscriber && subscriber(false);\n    return data;\n  }\n\n  subscribe(fn: (aborted: boolean) => void) {\n    this.subscriber = fn;\n  }\n\n  cancel() {\n    this.controller.abort();\n    this.pendingKeys.forEach((v, k) => this.pendingKeys.delete(k));\n    let subscriber = this.subscriber;\n    subscriber && subscriber(true);\n  }\n\n  async resolveData(signal: AbortSignal) {\n    let aborted = false;\n    if (!this.done) {\n      let onAbort = () => this.cancel();\n      signal.addEventListener(\"abort\", onAbort);\n      aborted = await new Promise((resolve) => {\n        this.subscribe((aborted) => {\n          signal.removeEventListener(\"abort\", onAbort);\n          if (aborted || this.done) {\n            resolve(aborted);\n          }\n        });\n      });\n    }\n    return aborted;\n  }\n\n  get done() {\n    return this.pendingKeys.size === 0;\n  }\n\n  get unwrappedData() {\n    invariant(\n      this.data !== null && this.done,\n      \"Can only unwrap data on initialized and settled deferreds\"\n    );\n\n    return Object.entries(this.data).reduce(\n      (acc, [key, value]) =>\n        Object.assign(acc, {\n          [key]: unwrapTrackedPromise(value),\n        }),\n      {}\n    );\n  }\n}\n\nfunction isTrackedPromise(value: any): value is TrackedPromise {\n  return (\n    value instanceof Promise && (value as TrackedPromise)._tracked === true\n  );\n}\n\nfunction unwrapTrackedPromise(value: any) {\n  if (!isTrackedPromise(value)) {\n    return value;\n  }\n\n  if (value._error) {\n    throw value._error;\n  }\n  return value._data;\n}\n\nexport function defer(data: Record<string, unknown>) {\n  return new DeferredData(data);\n}\n\nexport type RedirectFunction = (\n  url: string,\n  init?: number | ResponseInit\n) => Response;\n\n/**\n * A redirect response. Sets the status code and the `Location` header.\n * Defaults to \"302 Found\".\n */\nexport const redirect: RedirectFunction = (url, init = 302) => {\n  let responseInit = init;\n  if (typeof responseInit === \"number\") {\n    responseInit = { status: responseInit };\n  } else if (typeof responseInit.status === \"undefined\") {\n    responseInit.status = 302;\n  }\n\n  let headers = new Headers(responseInit.headers);\n  headers.set(\"Location\", url);\n\n  return new Response(null, {\n    ...responseInit,\n    headers,\n  });\n};\n\n/**\n * @private\n * Utility class we use to hold auto-unwrapped 4xx/5xx Response bodies\n */\nexport class ErrorResponse {\n  status: number;\n  statusText: string;\n  data: any;\n\n  constructor(status: number, statusText: string | undefined, data: any) {\n    this.status = status;\n    this.statusText = statusText || \"\";\n    this.data = data;\n  }\n}\n\n/**\n * Check if the given error is an ErrorResponse generated from a 4xx/5xx\n * Response throw from an action/loader\n */\nexport function isRouteErrorResponse(e: any): e is ErrorResponse {\n  return e instanceof ErrorResponse;\n}\n","import type { History, Location, Path, To } from \"./history\";\nimport {\n  Action as HistoryAction,\n  createLocation,\n  createPath,\n  parsePath,\n} from \"./history\";\nimport type {\n  DataResult,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteObject,\n  DeferredResult,\n  ErrorResult,\n  FormEncType,\n  FormMethod,\n  RedirectResult,\n  RouteData,\n  AgnosticRouteObject,\n  Submission,\n  SuccessResult,\n  AgnosticRouteMatch,\n} from \"./utils\";\nimport {\n  DeferredData,\n  ErrorResponse,\n  ResultType,\n  convertRoutesToDataRoutes,\n  getPathContributingMatches,\n  invariant,\n  isRouteErrorResponse,\n  joinPaths,\n  matchRoutes,\n  resolveTo,\n} from \"./utils\";\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Types and Constants\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * A Router instance manages all navigation and data loading/mutations\n */\nexport interface Router {\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the basename for the router\n   */\n  get basename(): RouterInit[\"basename\"];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the current state of the router\n   */\n  get state(): RouterState;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Return the routes for this router instance\n   */\n  get routes(): AgnosticDataRouteObject[];\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Initialize the router, including adding history listeners and kicking off\n   * initial data fetches.  Returns a function to cleanup listeners and abort\n   * any in-progress loads\n   */\n  initialize(): Router;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Subscribe to router.state updates\n   *\n   * @param fn function to call with the new state\n   */\n  subscribe(fn: RouterSubscriber): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Enable scroll restoration behavior in the router\n   *\n   * @param savedScrollPositions Object that will manage positions, in case\n   *                             it's being restored from sessionStorage\n   * @param getScrollPosition    Function to get the active Y scroll position\n   * @param getKey               Function to get the key to use for restoration\n   */\n  enableScrollRestoration(\n    savedScrollPositions: Record<string, number>,\n    getScrollPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ): () => void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Navigate forward/backward in the history stack\n   * @param to Delta to move in the history stack\n   */\n  navigate(to: number): void;\n\n  /**\n   * Navigate to the given path\n   * @param to Path to navigate to\n   * @param opts Navigation options (method, submission, etc.)\n   */\n  navigate(to: To, opts?: RouterNavigateOptions): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a fetcher load/submission\n   *\n   * @param key     Fetcher key\n   * @param routeId Route that owns the fetcher\n   * @param href    href to fetch\n   * @param opts    Fetcher options, (method, submission, etc.)\n   */\n  fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterNavigateOptions\n  ): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Trigger a revalidation of all current route loaders and fetcher loads\n   */\n  revalidate(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Utility function to create an href for the given location\n   * @param location\n   */\n  createHref(location: Location | URL): string;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Get/create a fetcher for the given key\n   * @param key\n   */\n  getFetcher<TData = any>(key?: string): Fetcher<TData>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Delete the fetcher for a given key\n   * @param key\n   */\n  deleteFetcher(key?: string): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Cleanup listeners and abort any in-progress loads\n   */\n  dispose(): void;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal fetch AbortControllers accessed by unit tests\n   */\n  _internalFetchControllers: Map<string, AbortController>;\n\n  /**\n   * @internal\n   * PRIVATE - DO NOT USE\n   *\n   * Internal pending DeferredData instances accessed by unit tests\n   */\n  _internalActiveDeferreds: Map<string, DeferredData>;\n}\n\n/**\n * State maintained internally by the router.  During a navigation, all states\n * reflect the the \"old\" location unless otherwise noted.\n */\nexport interface RouterState {\n  /**\n   * The action of the most recent navigation\n   */\n  historyAction: HistoryAction;\n\n  /**\n   * The current location reflected by the router\n   */\n  location: Location;\n\n  /**\n   * The current set of route matches\n   */\n  matches: AgnosticDataRouteMatch[];\n\n  /**\n   * Tracks whether we've completed our initial data load\n   */\n  initialized: boolean;\n\n  /**\n   * Current scroll position we should start at for a new view\n   *  - number -> scroll position to restore to\n   *  - false -> do not restore scroll at all (used during submissions)\n   *  - null -> don't have a saved position, scroll to hash or top of page\n   */\n  restoreScrollPosition: number | false | null;\n\n  /**\n   * Indicate whether this navigation should skip resetting the scroll position\n   * if we are unable to restore the scroll position\n   */\n  preventScrollReset: boolean;\n\n  /**\n   * Tracks the state of the current navigation\n   */\n  navigation: Navigation;\n\n  /**\n   * Tracks any in-progress revalidations\n   */\n  revalidation: RevalidationState;\n\n  /**\n   * Data from the loaders for the current matches\n   */\n  loaderData: RouteData;\n\n  /**\n   * Data from the action for the current matches\n   */\n  actionData: RouteData | null;\n\n  /**\n   * Errors caught from loaders for the current matches\n   */\n  errors: RouteData | null;\n\n  /**\n   * Map of current fetchers\n   */\n  fetchers: Map<string, Fetcher>;\n}\n\n/**\n * Data that can be passed into hydrate a Router from SSR\n */\nexport type HydrationState = Partial<\n  Pick<RouterState, \"loaderData\" | \"actionData\" | \"errors\">\n>;\n\n/**\n * Initialization options for createRouter\n */\nexport interface RouterInit {\n  basename?: string;\n  routes: AgnosticRouteObject[];\n  history: History;\n  hydrationData?: HydrationState;\n}\n\n/**\n * State returned from a server-side query() call\n */\nexport interface StaticHandlerContext {\n  location: RouterState[\"location\"];\n  matches: RouterState[\"matches\"];\n  loaderData: RouterState[\"loaderData\"];\n  actionData: RouterState[\"actionData\"];\n  errors: RouterState[\"errors\"];\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n  actionHeaders: Record<string, Headers>;\n  _deepestRenderedBoundaryId?: string | null;\n}\n\n/**\n * A StaticHandler instance manages a singular SSR navigation/fetch event\n */\nexport interface StaticHandler {\n  dataRoutes: AgnosticDataRouteObject[];\n  query(request: Request): Promise<StaticHandlerContext | Response>;\n  queryRoute(request: Request, routeId?: string): Promise<any>;\n}\n\n/**\n * Subscriber function signature for changes to router state\n */\nexport interface RouterSubscriber {\n  (state: RouterState): void;\n}\n\ninterface UseMatchesMatch {\n  id: string;\n  pathname: string;\n  params: AgnosticRouteMatch[\"params\"];\n  data: unknown;\n  handle: unknown;\n}\n\n/**\n * Function signature for determining the key to be used in scroll restoration\n * for a given location\n */\nexport interface GetScrollRestorationKeyFunction {\n  (location: Location, matches: UseMatchesMatch[]): string | null;\n}\n\n/**\n * Function signature for determining the current scroll position\n */\nexport interface GetScrollPositionFunction {\n  (): number;\n}\n\n/**\n * Options for a navigate() call for a Link navigation\n */\ntype LinkNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  preventScrollReset?: boolean;\n};\n\n/**\n * Options for a navigate() call for a Form navigation\n */\ntype SubmissionNavigateOptions = {\n  replace?: boolean;\n  state?: any;\n  formMethod?: FormMethod;\n  formEncType?: FormEncType;\n  formData: FormData;\n};\n\n/**\n * Options to pass to navigate() for either a Link or Form navigation\n */\nexport type RouterNavigateOptions =\n  | LinkNavigateOptions\n  | SubmissionNavigateOptions;\n\n/**\n * Options to pass to fetch()\n */\nexport type RouterFetchOptions =\n  | Omit<LinkNavigateOptions, \"replace\">\n  | Omit<SubmissionNavigateOptions, \"replace\">;\n\n/**\n * Potential states for state.navigation\n */\nexport type NavigationStates = {\n  Idle: {\n    state: \"idle\";\n    location: undefined;\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    location: Location;\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    location: Location;\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n  };\n};\n\nexport type Navigation = NavigationStates[keyof NavigationStates];\n\nexport type RevalidationState = \"idle\" | \"loading\";\n\n/**\n * Potential states for fetchers\n */\ntype FetcherStates<TData = any> = {\n  Idle: {\n    state: \"idle\";\n    formMethod: undefined;\n    formAction: undefined;\n    formEncType: undefined;\n    formData: undefined;\n    data: TData | undefined;\n  };\n  Loading: {\n    state: \"loading\";\n    formMethod: FormMethod | undefined;\n    formAction: string | undefined;\n    formEncType: FormEncType | undefined;\n    formData: FormData | undefined;\n    data: TData | undefined;\n  };\n  Submitting: {\n    state: \"submitting\";\n    formMethod: FormMethod;\n    formAction: string;\n    formEncType: FormEncType;\n    formData: FormData;\n    data: TData | undefined;\n  };\n};\n\nexport type Fetcher<TData = any> =\n  FetcherStates<TData>[keyof FetcherStates<TData>];\n\ninterface ShortCircuitable {\n  /**\n   * startNavigation does not need to complete the navigation because we\n   * redirected or got interrupted\n   */\n  shortCircuited?: boolean;\n}\n\ninterface HandleActionResult extends ShortCircuitable {\n  /**\n   * Error thrown from the current action, keyed by the route containing the\n   * error boundary to render the error.  To be committed to the state after\n   * loaders have completed\n   */\n  pendingActionError?: RouteData;\n  /**\n   * Data returned from the current action, keyed by the route owning the action.\n   * To be committed to the state after loaders have completed\n   */\n  pendingActionData?: RouteData;\n}\n\ninterface HandleLoadersResult extends ShortCircuitable {\n  /**\n   * loaderData returned from the current set of loaders\n   */\n  loaderData?: RouterState[\"loaderData\"];\n  /**\n   * errors thrown from the current set of loaders\n   */\n  errors?: RouterState[\"errors\"];\n}\n\n/**\n * Tuple of [key, href, DataRouteMatch, DataRouteMatch[]] for a revalidating\n * fetcher.load()\n */\ntype RevalidatingFetcher = [\n  string,\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Tuple of [href, DataRouteMatch, DataRouteMatch[]] for an active\n * fetcher.load()\n */\ntype FetchLoadMatch = [\n  string,\n  AgnosticDataRouteMatch,\n  AgnosticDataRouteMatch[]\n];\n\n/**\n * Wrapper object to allow us to throw any response out from callLoaderOrAction\n * for queryRouter while preserving whether or not it was thrown or returned\n * from the loader/action\n */\ninterface QueryRouteResponse {\n  type: ResultType.data | ResultType.error;\n  response: Response;\n}\n\nexport const IDLE_NAVIGATION: NavigationStates[\"Idle\"] = {\n  state: \"idle\",\n  location: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nexport const IDLE_FETCHER: FetcherStates[\"Idle\"] = {\n  state: \"idle\",\n  data: undefined,\n  formMethod: undefined,\n  formAction: undefined,\n  formEncType: undefined,\n  formData: undefined,\n};\n\nconst isBrowser =\n  typeof window !== \"undefined\" &&\n  typeof window.document !== \"undefined\" &&\n  typeof window.document.createElement !== \"undefined\";\nconst isServer = !isBrowser;\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createRouter\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create a router and listen to history POP navigations\n */\nexport function createRouter(init: RouterInit): Router {\n  invariant(\n    init.routes.length > 0,\n    \"You must provide a non-empty routes array to createRouter\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(init.routes);\n  // Cleanup function for history\n  let unlistenHistory: (() => void) | null = null;\n  // Externally-provided functions to call on all state changes\n  let subscribers = new Set<RouterSubscriber>();\n  // Externally-provided object to hold scroll restoration locations during routing\n  let savedScrollPositions: Record<string, number> | null = null;\n  // Externally-provided function to get scroll restoration keys\n  let getScrollRestorationKey: GetScrollRestorationKeyFunction | null = null;\n  // Externally-provided function to get current scroll position\n  let getScrollPosition: GetScrollPositionFunction | null = null;\n  // One-time flag to control the initial hydration scroll restoration.  Because\n  // we don't get the saved positions from <ScrollRestoration /> until _after_\n  // the initial render, we need to manually trigger a separate updateState to\n  // send along the restoreScrollPosition\n  let initialScrollRestored = false;\n\n  let initialMatches = matchRoutes(\n    dataRoutes,\n    init.history.location,\n    init.basename\n  );\n  let initialErrors: RouteData | null = null;\n\n  if (initialMatches == null) {\n    // If we do not match a user-provided-route, fall back to the root\n    // to allow the error boundary to take over\n    let { matches, route, error } = getNotFoundMatches(dataRoutes);\n    initialMatches = matches;\n    initialErrors = { [route.id]: error };\n  }\n\n  let initialized =\n    !initialMatches.some((m) => m.route.loader) || init.hydrationData != null;\n\n  let router: Router;\n  let state: RouterState = {\n    historyAction: init.history.action,\n    location: init.history.location,\n    matches: initialMatches,\n    initialized,\n    navigation: IDLE_NAVIGATION,\n    restoreScrollPosition: null,\n    preventScrollReset: false,\n    revalidation: \"idle\",\n    loaderData: (init.hydrationData && init.hydrationData.loaderData) || {},\n    actionData: (init.hydrationData && init.hydrationData.actionData) || null,\n    errors: (init.hydrationData && init.hydrationData.errors) || initialErrors,\n    fetchers: new Map(),\n  };\n\n  // -- Stateful internal variables to manage navigations --\n  // Current navigation in progress (to be committed in completeNavigation)\n  let pendingAction: HistoryAction = HistoryAction.Pop;\n  // Should the current navigation prevent the scroll reset if scroll cannot\n  // be restored?\n  let pendingPreventScrollReset = false;\n  // AbortController for the active navigation\n  let pendingNavigationController: AbortController | null;\n  // We use this to avoid touching history in completeNavigation if a\n  // revalidation is entirely uninterrupted\n  let isUninterruptedRevalidation = false;\n  // Use this internal flag to force revalidation of all loaders:\n  //  - submissions (completed or interrupted)\n  //  - useRevalidate()\n  //  - X-Remix-Revalidate (from redirect)\n  let isRevalidationRequired = false;\n  // Use this internal array to capture routes that require revalidation due\n  // to a cancelled deferred on action submission\n  let cancelledDeferredRoutes: string[] = [];\n  // Use this internal array to capture fetcher loads that were cancelled by an\n  // action navigation and require revalidation\n  let cancelledFetcherLoads: string[] = [];\n  // AbortControllers for any in-flight fetchers\n  let fetchControllers = new Map<string, AbortController>();\n  // Track loads based on the order in which they started\n  let incrementingLoadId = 0;\n  // Track the outstanding pending navigation data load to be compared against\n  // the globally incrementing load when a fetcher load lands after a completed\n  // navigation\n  let pendingNavigationLoadId = -1;\n  // Fetchers that triggered data reloads as a result of their actions\n  let fetchReloadIds = new Map<string, number>();\n  // Fetchers that triggered redirect navigations from their actions\n  let fetchRedirectIds = new Set<string>();\n  // Most recent href/match for fetcher.load calls for fetchers\n  let fetchLoadMatches = new Map<string, FetchLoadMatch>();\n  // Store DeferredData instances for active route matches.  When a\n  // route loader returns defer() we stick one in here.  Then, when a nested\n  // promise resolves we update loaderData.  If a new navigation starts we\n  // cancel active deferreds for eliminated routes.\n  let activeDeferreds = new Map<string, DeferredData>();\n\n  // Initialize the router, all side effects should be kicked off from here.\n  // Implemented as a Fluent API for ease of:\n  //   let router = createRouter(init).initialize();\n  function initialize() {\n    // If history informs us of a POP navigation, start the navigation but do not update\n    // state.  We'll update our own state once the navigation completes\n    unlistenHistory = init.history.listen(\n      ({ action: historyAction, location }) =>\n        startNavigation(historyAction, location)\n    );\n\n    // Kick off initial data load if needed.  Use Pop to avoid modifying history\n    if (!state.initialized) {\n      startNavigation(HistoryAction.Pop, state.location);\n    }\n\n    return router;\n  }\n\n  // Clean up a router and it's side effects\n  function dispose() {\n    if (unlistenHistory) {\n      unlistenHistory();\n    }\n    subscribers.clear();\n    pendingNavigationController && pendingNavigationController.abort();\n    state.fetchers.forEach((_, key) => deleteFetcher(key));\n  }\n\n  // Subscribe to state updates for the router\n  function subscribe(fn: RouterSubscriber) {\n    subscribers.add(fn);\n    return () => subscribers.delete(fn);\n  }\n\n  // Update our state and notify the calling context of the change\n  function updateState(newState: Partial<RouterState>): void {\n    state = {\n      ...state,\n      ...newState,\n    };\n    subscribers.forEach((subscriber) => subscriber(state));\n  }\n\n  // Complete a navigation returning the state.navigation back to the IDLE_NAVIGATION\n  // and setting state.[historyAction/location/matches] to the new route.\n  // - Location is a required param\n  // - Navigation will always be set to IDLE_NAVIGATION\n  // - Can pass any other state in newState\n  function completeNavigation(\n    location: Location,\n    newState: Partial<Omit<RouterState, \"action\" | \"location\" | \"navigation\">>\n  ): void {\n    // Deduce if we're in a loading/actionReload state:\n    // - We have committed actionData in the store\n    // - The current navigation was a submission\n    // - We're past the submitting state and into the loading state\n    // - The location we've finished loading is different from the submission\n    //   location, indicating we redirected from the action (avoids false\n    //   positives for loading/submissionRedirect when actionData returned\n    //   on a prior submission)\n    let isActionReload =\n      state.actionData != null &&\n      state.navigation.formMethod != null &&\n      state.navigation.state === \"loading\" &&\n      state.navigation.formAction?.split(\"?\")[0] === location.pathname;\n\n    // Always preserve any existing loaderData from re-used routes\n    let newLoaderData = newState.loaderData\n      ? {\n          loaderData: mergeLoaderData(\n            state.loaderData,\n            newState.loaderData,\n            newState.matches || []\n          ),\n        }\n      : {};\n\n    updateState({\n      // Clear existing actionData on any completed navigation beyond the original\n      // action, unless we're currently finishing the loading/actionReload state.\n      // Do this prior to spreading in newState in case we got back to back actions\n      ...(isActionReload ? {} : { actionData: null }),\n      ...newState,\n      ...newLoaderData,\n      historyAction: pendingAction,\n      location,\n      initialized: true,\n      navigation: IDLE_NAVIGATION,\n      revalidation: \"idle\",\n      // Don't restore on submission navigations\n      restoreScrollPosition: state.navigation.formData\n        ? false\n        : getSavedScrollPosition(location, newState.matches || state.matches),\n      preventScrollReset: pendingPreventScrollReset,\n    });\n\n    if (isUninterruptedRevalidation) {\n      // If this was an uninterrupted revalidation then do not touch history\n    } else if (pendingAction === HistoryAction.Pop) {\n      // Do nothing for POP - URL has already been updated\n    } else if (pendingAction === HistoryAction.Push) {\n      init.history.push(location, location.state);\n    } else if (pendingAction === HistoryAction.Replace) {\n      init.history.replace(location, location.state);\n    }\n\n    // Reset stateful navigation vars\n    pendingAction = HistoryAction.Pop;\n    pendingPreventScrollReset = false;\n    isUninterruptedRevalidation = false;\n    isRevalidationRequired = false;\n    cancelledDeferredRoutes = [];\n    cancelledFetcherLoads = [];\n  }\n\n  // Trigger a navigation event, which can either be a numerical POP or a PUSH\n  // replace with an optional submission\n  async function navigate(\n    to: number | To,\n    opts?: RouterNavigateOptions\n  ): Promise<void> {\n    if (typeof to === \"number\") {\n      init.history.go(to);\n      return;\n    }\n\n    let { path, submission, error } = normalizeNavigateOptions(to, opts);\n\n    let location = createLocation(state.location, path, opts && opts.state);\n\n    // When using navigate as a PUSH/REPLACE we aren't reading an already-encoded\n    // URL from window.location, so we need to encode it here so the behavior\n    // remains the same as POP and non-data-router usages.  new URL() does all\n    // the same encoding we'd get from a history.pushState/window.location read\n    // without having to touch history\n    let url = createURL(createPath(location));\n    location = {\n      ...location,\n      pathname: url.pathname,\n      search: url.search,\n      hash: url.hash,\n    };\n\n    let historyAction =\n      (opts && opts.replace) === true || submission != null\n        ? HistoryAction.Replace\n        : HistoryAction.Push;\n    let preventScrollReset =\n      opts && \"preventScrollReset\" in opts\n        ? opts.preventScrollReset === true\n        : undefined;\n\n    return await startNavigation(historyAction, location, {\n      submission,\n      // Send through the formData serialization error if we have one so we can\n      // render at the right error boundary after we match routes\n      pendingError: error,\n      preventScrollReset,\n      replace: opts && opts.replace,\n    });\n  }\n\n  // Revalidate all current loaders.  If a navigation is in progress or if this\n  // is interrupted by a navigation, allow this to \"succeed\" by calling all\n  // loaders during the next loader round\n  function revalidate() {\n    interruptActiveLoads();\n    updateState({ revalidation: \"loading\" });\n\n    // If we're currently submitting an action, we don't need to start a new\n    // navigation, we'll just let the follow up loader execution call all loaders\n    if (state.navigation.state === \"submitting\") {\n      return;\n    }\n\n    // If we're currently in an idle state, start a new navigation for the current\n    // action/location and mark it as uninterrupted, which will skip the history\n    // update in completeNavigation\n    if (state.navigation.state === \"idle\") {\n      startNavigation(state.historyAction, state.location, {\n        startUninterruptedRevalidation: true,\n      });\n      return;\n    }\n\n    // Otherwise, if we're currently in a loading state, just start a new\n    // navigation to the navigation.location but do not trigger an uninterrupted\n    // revalidation so that history correctly updates once the navigation completes\n    startNavigation(\n      pendingAction || state.historyAction,\n      state.navigation.location,\n      { overrideNavigation: state.navigation }\n    );\n  }\n\n  // Start a navigation to the given action/location.  Can optionally provide a\n  // overrideNavigation which will override the normalLoad in the case of a redirect\n  // navigation\n  async function startNavigation(\n    historyAction: HistoryAction,\n    location: Location,\n    opts?: {\n      submission?: Submission;\n      overrideNavigation?: Navigation;\n      pendingError?: ErrorResponse;\n      startUninterruptedRevalidation?: boolean;\n      preventScrollReset?: boolean;\n      replace?: boolean;\n    }\n  ): Promise<void> {\n    // Abort any in-progress navigations and start a new one. Unset any ongoing\n    // uninterrupted revalidations unless told otherwise, since we want this\n    // new navigation to update history normally\n    pendingNavigationController && pendingNavigationController.abort();\n    pendingNavigationController = null;\n    pendingAction = historyAction;\n    isUninterruptedRevalidation =\n      (opts && opts.startUninterruptedRevalidation) === true;\n\n    // Save the current scroll position every time we start a new navigation,\n    // and track whether we should reset scroll on completion\n    saveScrollPosition(state.location, state.matches);\n    pendingPreventScrollReset = (opts && opts.preventScrollReset) === true;\n\n    let loadingNavigation = opts && opts.overrideNavigation;\n    let matches = matchRoutes(dataRoutes, location, init.basename);\n\n    // Short circuit with a 404 on the root error boundary if we match nothing\n    if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      // Cancel all pending deferred on 404s since we don't keep any routes\n      cancelActiveDeferreds();\n      completeNavigation(location, {\n        matches: notFoundMatches,\n        loaderData: {},\n        errors: {\n          [route.id]: error,\n        },\n      });\n      return;\n    }\n\n    // Short circuit if it's only a hash change\n    if (isHashChangeOnly(state.location, location)) {\n      completeNavigation(location, { matches });\n      return;\n    }\n\n    // Create a controller/Request for this navigation\n    pendingNavigationController = new AbortController();\n    let request = createRequest(\n      location,\n      pendingNavigationController.signal,\n      opts && opts.submission\n    );\n    let pendingActionData: RouteData | undefined;\n    let pendingError: RouteData | undefined;\n\n    if (opts && opts.pendingError) {\n      // If we have a pendingError, it means the user attempted a GET submission\n      // with binary FormData so assign here and skip to handleLoaders.  That\n      // way we handle calling loaders above the boundary etc.  It's not really\n      // different from an actionError in that sense.\n      pendingError = {\n        [findNearestBoundary(matches).route.id]: opts.pendingError,\n      };\n    } else if (opts && opts.submission) {\n      // Call action if we received an action submission\n      let actionOutput = await handleAction(\n        request,\n        location,\n        opts.submission,\n        matches,\n        { replace: opts.replace }\n      );\n\n      if (actionOutput.shortCircuited) {\n        return;\n      }\n\n      pendingActionData = actionOutput.pendingActionData;\n      pendingError = actionOutput.pendingActionError;\n\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        ...opts.submission,\n      };\n      loadingNavigation = navigation;\n    }\n\n    // Call loaders\n    let { shortCircuited, loaderData, errors } = await handleLoaders(\n      request,\n      location,\n      matches,\n      loadingNavigation,\n      opts && opts.submission,\n      opts && opts.replace,\n      pendingActionData,\n      pendingError\n    );\n\n    if (shortCircuited) {\n      return;\n    }\n\n    // Clean up now that the action/loaders have completed.  Don't clean up if\n    // we short circuited because pendingNavigationController will have already\n    // been assigned to a new controller for the next navigation\n    pendingNavigationController = null;\n\n    completeNavigation(location, {\n      matches,\n      loaderData,\n      errors,\n    });\n  }\n\n  // Call the action matched by the leaf route for this navigation and handle\n  // redirects/errors\n  async function handleAction(\n    request: Request,\n    location: Location,\n    submission: Submission,\n    matches: AgnosticDataRouteMatch[],\n    opts?: { replace?: boolean }\n  ): Promise<HandleActionResult> {\n    interruptActiveLoads();\n\n    // Put us in a submitting state\n    let navigation: NavigationStates[\"Submitting\"] = {\n      state: \"submitting\",\n      location,\n      ...submission,\n    };\n    updateState({ navigation });\n\n    // Call our action and get the result\n    let result: DataResult;\n    let actionMatch = getTargetMatch(matches, location);\n\n    if (!actionMatch.route.action) {\n      result = getMethodNotAllowedResult(location);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        router.basename\n      );\n\n      if (request.signal.aborted) {\n        return { shortCircuited: true };\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, result.location),\n        ...submission,\n      };\n      await startRedirectNavigation(\n        result,\n        redirectNavigation,\n        opts && opts.replace\n      );\n      return { shortCircuited: true };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n\n      // By default, all submissions are REPLACE navigations, but if the\n      // action threw an error that'll be rendered in an errorElement, we fall\n      // back to PUSH so that the user can use the back button to get back to\n      // the pre-submission form location to try again\n      if ((opts && opts.replace) !== true) {\n        pendingAction = HistoryAction.Push;\n      }\n\n      return {\n        pendingActionError: { [boundaryMatch.route.id]: result.error },\n      };\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    return {\n      pendingActionData: { [actionMatch.route.id]: result.data },\n    };\n  }\n\n  // Call all applicable loaders for the given matches, handling redirects,\n  // errors, etc.\n  async function handleLoaders(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    overrideNavigation?: Navigation,\n    submission?: Submission,\n    replace?: boolean,\n    pendingActionData?: RouteData,\n    pendingError?: RouteData\n  ): Promise<HandleLoadersResult> {\n    // Figure out the right navigation we want to use for data loading\n    let loadingNavigation = overrideNavigation;\n    if (!loadingNavigation) {\n      let navigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      loadingNavigation = navigation;\n    }\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      location,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      pendingActionData,\n      pendingError,\n      fetchLoadMatches\n    );\n\n    // Cancel pending deferreds for no-longer-matched routes or routes we're\n    // about to reload.  Note that if this is an action reload we would have\n    // already cancelled all pending deferreds so this would be a no-op\n    cancelActiveDeferreds(\n      (routeId) =>\n        !(matches && matches.some((m) => m.route.id === routeId)) ||\n        (matchesToLoad && matchesToLoad.some((m) => m.route.id === routeId))\n    );\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0 && revalidatingFetchers.length === 0) {\n      completeNavigation(location, {\n        matches,\n        loaderData: mergeLoaderData(state.loaderData, {}, matches),\n        // Commit pending error if we're short circuiting\n        errors: pendingError || null,\n        actionData: pendingActionData || null,\n      });\n      return { shortCircuited: true };\n    }\n\n    // If this is an uninterrupted revalidation, we remain in our current idle\n    // state.  If not, we need to switch to our loading state and load data,\n    // preserving any new action data or existing action data (in the case of\n    // a revalidation interrupting an actionReload)\n    if (!isUninterruptedRevalidation) {\n      revalidatingFetchers.forEach(([key]) => {\n        let fetcher = state.fetchers.get(key);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: fetcher && fetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(key, revalidatingFetcher);\n      });\n      updateState({\n        navigation: loadingNavigation,\n        actionData: pendingActionData || state.actionData || null,\n        ...(revalidatingFetchers.length > 0\n          ? { fetchers: new Map(state.fetchers) }\n          : {}),\n      });\n    }\n\n    pendingNavigationLoadId = ++incrementingLoadId;\n    revalidatingFetchers.forEach(([key]) =>\n      fetchControllers.set(key, pendingNavigationController!)\n    );\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        request\n      );\n\n    if (request.signal.aborted) {\n      return { shortCircuited: true };\n    }\n\n    // Clean up _after_ loaders have completed.  Don't clean up if we short\n    // circuited because fetchControllers would have been aborted and\n    // reassigned to new controllers for the next navigation\n    revalidatingFetchers.forEach(([key]) => fetchControllers.delete(key));\n\n    // If any loaders returned a redirect Response, start a new REPLACE navigation\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation, replace);\n      return { shortCircuited: true };\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      matches,\n      matchesToLoad,\n      loaderResults,\n      pendingError,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    // Wire up subscribers to update loaderData as promises settle\n    activeDeferreds.forEach((deferredData, routeId) => {\n      deferredData.subscribe((aborted) => {\n        // Note: No need to updateState here since the TrackedPromise on\n        // loaderData is stable across resolve/reject\n        // Remove this instance if we were aborted or if promises have settled\n        if (aborted || deferredData.done) {\n          activeDeferreds.delete(routeId);\n        }\n      });\n    });\n\n    markFetchRedirectsDone();\n    let didAbortFetchLoads = abortStaleFetchLoads(pendingNavigationLoadId);\n\n    return {\n      loaderData,\n      errors,\n      ...(didAbortFetchLoads || revalidatingFetchers.length > 0\n        ? { fetchers: new Map(state.fetchers) }\n        : {}),\n    };\n  }\n\n  function getFetcher<TData = any>(key: string): Fetcher<TData> {\n    return state.fetchers.get(key) || IDLE_FETCHER;\n  }\n\n  // Trigger a fetcher load/submit for the given fetcher key\n  function fetch(\n    key: string,\n    routeId: string,\n    href: string,\n    opts?: RouterFetchOptions\n  ) {\n    if (isServer) {\n      throw new Error(\n        \"router.fetch() was called during the server render, but it shouldn't be. \" +\n          \"You are likely calling a useFetcher() method in the body of your component. \" +\n          \"Try moving it to a useEffect or a callback.\"\n      );\n    }\n\n    if (fetchControllers.has(key)) abortFetcher(key);\n\n    let matches = matchRoutes(dataRoutes, href, init.basename);\n    if (!matches) {\n      setFetcherError(key, routeId, new ErrorResponse(404, \"Not Found\", null));\n      return;\n    }\n\n    let { path, submission } = normalizeNavigateOptions(href, opts, true);\n    let match = getTargetMatch(matches, path);\n\n    if (submission) {\n      handleFetcherAction(key, routeId, path, match, matches, submission);\n      return;\n    }\n\n    // Store off the match so we can call it's shouldRevalidate on subsequent\n    // revalidations\n    fetchLoadMatches.set(key, [path, match, matches]);\n    handleFetcherLoader(key, routeId, path, match, matches);\n  }\n\n  // Call the action for the matched fetcher.submit(), and then handle redirects,\n  // errors, and revalidation\n  async function handleFetcherAction(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    requestMatches: AgnosticDataRouteMatch[],\n    submission: Submission\n  ) {\n    interruptActiveLoads();\n    fetchLoadMatches.delete(key);\n\n    if (!match.route.action) {\n      let { error } = getMethodNotAllowedResult(path);\n      setFetcherError(key, routeId, error);\n      return;\n    }\n\n    // Put this fetcher into it's submitting state\n    let existingFetcher = state.fetchers.get(key);\n    let fetcher: FetcherStates[\"Submitting\"] = {\n      state: \"submitting\",\n      ...submission,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, fetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the action for the fetcher\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal, submission);\n    fetchControllers.set(key, abortController);\n\n    let actionResult = await callLoaderOrAction(\n      \"action\",\n      fetchRequest,\n      match,\n      requestMatches,\n      router.basename\n    );\n\n    if (fetchRequest.signal.aborted) {\n      // We can delete this so long as we weren't aborted by ou our own fetcher\n      // re-submit which would have put _new_ controller is in fetchControllers\n      if (fetchControllers.get(key) === abortController) {\n        fetchControllers.delete(key);\n      }\n      return;\n    }\n\n    if (isRedirectResult(actionResult)) {\n      fetchControllers.delete(key);\n      fetchRedirectIds.add(key);\n      let loadingFetcher: FetcherStates[\"Loading\"] = {\n        state: \"loading\",\n        ...submission,\n        data: undefined,\n      };\n      state.fetchers.set(key, loadingFetcher);\n      updateState({ fetchers: new Map(state.fetchers) });\n\n      let redirectNavigation: NavigationStates[\"Loading\"] = {\n        state: \"loading\",\n        location: createLocation(state.location, actionResult.location),\n        ...submission,\n      };\n      await startRedirectNavigation(actionResult, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(actionResult)) {\n      setFetcherError(key, routeId, actionResult.error);\n      return;\n    }\n\n    if (isDeferredResult(actionResult)) {\n      invariant(false, \"defer() is not supported in actions\");\n    }\n\n    // Start the data load for current matches, or the next location if we're\n    // in the middle of a navigation\n    let nextLocation = state.navigation.location || state.location;\n    let revalidationRequest = createRequest(\n      nextLocation,\n      abortController.signal\n    );\n    let matches =\n      state.navigation.state !== \"idle\"\n        ? matchRoutes(dataRoutes, state.navigation.location, init.basename)\n        : state.matches;\n\n    invariant(matches, \"Didn't find any matches after fetcher action\");\n\n    let loadId = ++incrementingLoadId;\n    fetchReloadIds.set(key, loadId);\n\n    let loadFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      data: actionResult.data,\n      ...submission,\n    };\n    state.fetchers.set(key, loadFetcher);\n\n    let [matchesToLoad, revalidatingFetchers] = getMatchesToLoad(\n      state,\n      matches,\n      submission,\n      nextLocation,\n      isRevalidationRequired,\n      cancelledDeferredRoutes,\n      cancelledFetcherLoads,\n      { [match.route.id]: actionResult.data },\n      undefined, // No need to send through errors since we short circuit above\n      fetchLoadMatches\n    );\n\n    // Put all revalidating fetchers into the loading state, except for the\n    // current fetcher which we want to keep in it's current loading state which\n    // contains it's action submission info + action data\n    revalidatingFetchers\n      .filter(([staleKey]) => staleKey !== key)\n      .forEach(([staleKey]) => {\n        let existingFetcher = state.fetchers.get(staleKey);\n        let revalidatingFetcher: FetcherStates[\"Loading\"] = {\n          state: \"loading\",\n          data: existingFetcher && existingFetcher.data,\n          formMethod: undefined,\n          formAction: undefined,\n          formEncType: undefined,\n          formData: undefined,\n        };\n        state.fetchers.set(staleKey, revalidatingFetcher);\n        fetchControllers.set(staleKey, abortController);\n      });\n\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    let { results, loaderResults, fetcherResults } =\n      await callLoadersAndMaybeResolveData(\n        state.matches,\n        matches,\n        matchesToLoad,\n        revalidatingFetchers,\n        revalidationRequest\n      );\n\n    if (abortController.signal.aborted) {\n      return;\n    }\n\n    fetchReloadIds.delete(key);\n    fetchControllers.delete(key);\n    revalidatingFetchers.forEach(([staleKey]) =>\n      fetchControllers.delete(staleKey)\n    );\n\n    let redirect = findRedirect(results);\n    if (redirect) {\n      let redirectNavigation = getLoaderRedirect(state, redirect);\n      await startRedirectNavigation(redirect, redirectNavigation);\n      return;\n    }\n\n    // Process and commit output from loaders\n    let { loaderData, errors } = processLoaderData(\n      state,\n      state.matches,\n      matchesToLoad,\n      loaderResults,\n      undefined,\n      revalidatingFetchers,\n      fetcherResults,\n      activeDeferreds\n    );\n\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: actionResult.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n\n    let didAbortFetchLoads = abortStaleFetchLoads(loadId);\n\n    // If we are currently in a navigation loading state and this fetcher is\n    // more recent than the navigation, we want the newer data so abort the\n    // navigation and complete it with the fetcher data\n    if (\n      state.navigation.state === \"loading\" &&\n      loadId > pendingNavigationLoadId\n    ) {\n      invariant(pendingAction, \"Expected pending action\");\n      pendingNavigationController && pendingNavigationController.abort();\n\n      completeNavigation(state.navigation.location, {\n        matches,\n        loaderData,\n        errors,\n        fetchers: new Map(state.fetchers),\n      });\n    } else {\n      // otherwise just update with the fetcher data, preserving any existing\n      // loaderData for loaders that did not need to reload.  We have to\n      // manually merge here since we aren't going through completeNavigation\n      updateState({\n        errors,\n        loaderData: mergeLoaderData(state.loaderData, loaderData, matches),\n        ...(didAbortFetchLoads ? { fetchers: new Map(state.fetchers) } : {}),\n      });\n      isRevalidationRequired = false;\n    }\n  }\n\n  // Call the matched loader for fetcher.load(), handling redirects, errors, etc.\n  async function handleFetcherLoader(\n    key: string,\n    routeId: string,\n    path: string,\n    match: AgnosticDataRouteMatch,\n    matches: AgnosticDataRouteMatch[]\n  ) {\n    let existingFetcher = state.fetchers.get(key);\n    // Put this fetcher into it's loading state\n    let loadingFetcher: FetcherStates[\"Loading\"] = {\n      state: \"loading\",\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n      data: existingFetcher && existingFetcher.data,\n    };\n    state.fetchers.set(key, loadingFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n\n    // Call the loader for this fetcher route match\n    let abortController = new AbortController();\n    let fetchRequest = createRequest(path, abortController.signal);\n    fetchControllers.set(key, abortController);\n    let result: DataResult = await callLoaderOrAction(\n      \"loader\",\n      fetchRequest,\n      match,\n      matches,\n      router.basename\n    );\n\n    // Deferred isn't supported or fetcher loads, await everything and treat it\n    // as a normal load.  resolveDeferredData will return undefined if this\n    // fetcher gets aborted, so we just leave result untouched and short circuit\n    // below if that happens\n    if (isDeferredResult(result)) {\n      result =\n        (await resolveDeferredData(result, fetchRequest.signal, true)) ||\n        result;\n    }\n\n    // We can delete this so long as we weren't aborted by ou our own fetcher\n    // re-load which would have put _new_ controller is in fetchControllers\n    if (fetchControllers.get(key) === abortController) {\n      fetchControllers.delete(key);\n    }\n\n    if (fetchRequest.signal.aborted) {\n      return;\n    }\n\n    // If the loader threw a redirect Response, start a new REPLACE navigation\n    if (isRedirectResult(result)) {\n      let redirectNavigation = getLoaderRedirect(state, result);\n      await startRedirectNavigation(result, redirectNavigation);\n      return;\n    }\n\n    // Process any non-redirect errors thrown\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, routeId);\n      state.fetchers.delete(key);\n      // TODO: In remix, this would reset to IDLE_NAVIGATION if it was a catch -\n      // do we need to behave any differently with our non-redirect errors?\n      // What if it was a non-redirect Response?\n      updateState({\n        fetchers: new Map(state.fetchers),\n        errors: {\n          [boundaryMatch.route.id]: result.error,\n        },\n      });\n      return;\n    }\n\n    invariant(!isDeferredResult(result), \"Unhandled fetcher deferred data\");\n\n    // Put the fetcher back into an idle state\n    let doneFetcher: FetcherStates[\"Idle\"] = {\n      state: \"idle\",\n      data: result.data,\n      formMethod: undefined,\n      formAction: undefined,\n      formEncType: undefined,\n      formData: undefined,\n    };\n    state.fetchers.set(key, doneFetcher);\n    updateState({ fetchers: new Map(state.fetchers) });\n  }\n\n  /**\n   * Utility function to handle redirects returned from an action or loader.\n   * Normally, a redirect \"replaces\" the navigation that triggered it.  So, for\n   * example:\n   *\n   *  - user is on /a\n   *  - user clicks a link to /b\n   *  - loader for /b redirects to /c\n   *\n   * In a non-JS app the browser would track the in-flight navigation to /b and\n   * then replace it with /c when it encountered the redirect response.  In\n   * the end it would only ever update the URL bar with /c.\n   *\n   * In client-side routing using pushState/replaceState, we aim to emulate\n   * this behavior and we also do not update history until the end of the\n   * navigation (including processed redirects).  This means that we never\n   * actually touch history until we've processed redirects, so we just use\n   * the history action from the original navigation (PUSH or REPLACE).\n   */\n  async function startRedirectNavigation(\n    redirect: RedirectResult,\n    navigation: Navigation,\n    replace?: boolean\n  ) {\n    if (redirect.revalidate) {\n      isRevalidationRequired = true;\n    }\n    invariant(\n      navigation.location,\n      \"Expected a location on the redirect navigation\"\n    );\n    // There's no need to abort on redirects, since we don't detect the\n    // redirect until the action/loaders have settled\n    pendingNavigationController = null;\n\n    let redirectHistoryAction =\n      replace === true ? HistoryAction.Replace : HistoryAction.Push;\n\n    await startNavigation(redirectHistoryAction, navigation.location, {\n      overrideNavigation: navigation,\n    });\n  }\n\n  async function callLoadersAndMaybeResolveData(\n    currentMatches: AgnosticDataRouteMatch[],\n    matches: AgnosticDataRouteMatch[],\n    matchesToLoad: AgnosticDataRouteMatch[],\n    fetchersToLoad: RevalidatingFetcher[],\n    request: Request\n  ) {\n    // Call all navigation loaders and revalidating fetcher loaders in parallel,\n    // then slice off the results into separate arrays so we can handle them\n    // accordingly\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\"loader\", request, match, matches, router.basename)\n      ),\n      ...fetchersToLoad.map(([, href, match, fetchMatches]) =>\n        callLoaderOrAction(\n          \"loader\",\n          createRequest(href, request.signal),\n          match,\n          fetchMatches,\n          router.basename\n        )\n      ),\n    ]);\n    let loaderResults = results.slice(0, matchesToLoad.length);\n    let fetcherResults = results.slice(matchesToLoad.length);\n\n    await Promise.all([\n      resolveDeferredResults(\n        currentMatches,\n        matchesToLoad,\n        loaderResults,\n        request.signal,\n        false,\n        state.loaderData\n      ),\n      resolveDeferredResults(\n        currentMatches,\n        fetchersToLoad.map(([, , match]) => match),\n        fetcherResults,\n        request.signal,\n        true\n      ),\n    ]);\n\n    return { results, loaderResults, fetcherResults };\n  }\n\n  function interruptActiveLoads() {\n    // Every interruption triggers a revalidation\n    isRevalidationRequired = true;\n\n    // Cancel pending route-level deferreds and mark cancelled routes for\n    // revalidation\n    cancelledDeferredRoutes.push(...cancelActiveDeferreds());\n\n    // Abort in-flight fetcher loads\n    fetchLoadMatches.forEach((_, key) => {\n      if (fetchControllers.has(key)) {\n        cancelledFetcherLoads.push(key);\n        abortFetcher(key);\n      }\n    });\n  }\n\n  function setFetcherError(key: string, routeId: string, error: any) {\n    let boundaryMatch = findNearestBoundary(state.matches, routeId);\n    deleteFetcher(key);\n    updateState({\n      errors: {\n        [boundaryMatch.route.id]: error,\n      },\n      fetchers: new Map(state.fetchers),\n    });\n  }\n\n  function deleteFetcher(key: string): void {\n    if (fetchControllers.has(key)) abortFetcher(key);\n    fetchLoadMatches.delete(key);\n    fetchReloadIds.delete(key);\n    fetchRedirectIds.delete(key);\n    state.fetchers.delete(key);\n  }\n\n  function abortFetcher(key: string) {\n    let controller = fetchControllers.get(key);\n    invariant(controller, `Expected fetch controller: ${key}`);\n    controller.abort();\n    fetchControllers.delete(key);\n  }\n\n  function markFetchersDone(keys: string[]) {\n    for (let key of keys) {\n      let fetcher = getFetcher(key);\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: fetcher.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  function markFetchRedirectsDone(): void {\n    let doneKeys = [];\n    for (let key of fetchRedirectIds) {\n      let fetcher = state.fetchers.get(key);\n      invariant(fetcher, `Expected fetcher: ${key}`);\n      if (fetcher.state === \"loading\") {\n        fetchRedirectIds.delete(key);\n        doneKeys.push(key);\n      }\n    }\n    markFetchersDone(doneKeys);\n  }\n\n  function abortStaleFetchLoads(landedId: number): boolean {\n    let yeetedKeys = [];\n    for (let [key, id] of fetchReloadIds) {\n      if (id < landedId) {\n        let fetcher = state.fetchers.get(key);\n        invariant(fetcher, `Expected fetcher: ${key}`);\n        if (fetcher.state === \"loading\") {\n          abortFetcher(key);\n          fetchReloadIds.delete(key);\n          yeetedKeys.push(key);\n        }\n      }\n    }\n    markFetchersDone(yeetedKeys);\n    return yeetedKeys.length > 0;\n  }\n\n  function cancelActiveDeferreds(\n    predicate?: (routeId: string) => boolean\n  ): string[] {\n    let cancelledRouteIds: string[] = [];\n    activeDeferreds.forEach((dfd, routeId) => {\n      if (!predicate || predicate(routeId)) {\n        // Cancel the deferred - but do not remove from activeDeferreds here -\n        // we rely on the subscribers to do that so our tests can assert proper\n        // cleanup via _internalActiveDeferreds\n        dfd.cancel();\n        cancelledRouteIds.push(routeId);\n        activeDeferreds.delete(routeId);\n      }\n    });\n    return cancelledRouteIds;\n  }\n\n  // Opt in to capturing and reporting scroll positions during navigations,\n  // used by the <ScrollRestoration> component\n  function enableScrollRestoration(\n    positions: Record<string, number>,\n    getPosition: GetScrollPositionFunction,\n    getKey?: GetScrollRestorationKeyFunction\n  ) {\n    savedScrollPositions = positions;\n    getScrollPosition = getPosition;\n    getScrollRestorationKey = getKey || ((location) => location.key);\n\n    // Perform initial hydration scroll restoration, since we miss the boat on\n    // the initial updateState() because we've not yet rendered <ScrollRestoration/>\n    // and therefore have no savedScrollPositions available\n    if (!initialScrollRestored && state.navigation === IDLE_NAVIGATION) {\n      initialScrollRestored = true;\n      let y = getSavedScrollPosition(state.location, state.matches);\n      if (y != null) {\n        updateState({ restoreScrollPosition: y });\n      }\n    }\n\n    return () => {\n      savedScrollPositions = null;\n      getScrollPosition = null;\n      getScrollRestorationKey = null;\n    };\n  }\n\n  function saveScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): void {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      savedScrollPositions[key] = getScrollPosition();\n    }\n  }\n\n  function getSavedScrollPosition(\n    location: Location,\n    matches: AgnosticDataRouteMatch[]\n  ): number | null {\n    if (savedScrollPositions && getScrollRestorationKey && getScrollPosition) {\n      let userMatches = matches.map((m) =>\n        createUseMatchesMatch(m, state.loaderData)\n      );\n      let key = getScrollRestorationKey(location, userMatches) || location.key;\n      let y = savedScrollPositions[key];\n      if (typeof y === \"number\") {\n        return y;\n      }\n    }\n    return null;\n  }\n\n  router = {\n    get basename() {\n      return init.basename;\n    },\n    get state() {\n      return state;\n    },\n    get routes() {\n      return dataRoutes;\n    },\n    initialize,\n    subscribe,\n    enableScrollRestoration,\n    navigate,\n    fetch,\n    revalidate,\n    // Passthrough to history-aware createHref used by useHref so we get proper\n    // hash-aware URLs in DOM paths\n    createHref: (to: To) => init.history.createHref(to),\n    getFetcher,\n    deleteFetcher,\n    dispose,\n    _internalFetchControllers: fetchControllers,\n    _internalActiveDeferreds: activeDeferreds,\n  };\n\n  return router;\n}\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region createStaticHandler\n////////////////////////////////////////////////////////////////////////////////\n\nconst validActionMethods = new Set([\"POST\", \"PUT\", \"PATCH\", \"DELETE\"]);\nconst validRequestMethods = new Set([\"GET\", \"HEAD\", ...validActionMethods]);\n\nexport function unstable_createStaticHandler(\n  routes: AgnosticRouteObject[]\n): StaticHandler {\n  invariant(\n    routes.length > 0,\n    \"You must provide a non-empty routes array to unstable_createStaticHandler\"\n  );\n\n  let dataRoutes = convertRoutesToDataRoutes(routes);\n\n  /**\n   * The query() method is intended for document requests, in which we want to\n   * call an optional action and potentially multiple loaders for all nested\n   * routes.  It returns a StaticHandlerContext object, which is very similar\n   * to the router state (location, loaderData, actionData, errors, etc.) and\n   * also adds SSR-specific information such as the statusCode and headers\n   * from action/loaders Responses.\n   *\n   * It _should_ never throw and should report all errors through the\n   * returned context.errors object, properly associating errors to their error\n   * boundary.  Additionally, it tracks _deepestRenderedBoundaryId which can be\n   * used to emulate React error boundaries during SSr by performing a second\n   * pass only down to the boundaryId.\n   *\n   * The one exception where we do not return a StaticHandlerContext is when a\n   * redirect response is returned or thrown from any action/loader.  We\n   * propagate that out and return the raw Response so the HTTP server can\n   * return it directly.\n   */\n  async function query(\n    request: Request\n  ): Promise<StaticHandlerContext | Response> {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      let {\n        matches: methodNotAllowedMatches,\n        route,\n        error,\n      } = getMethodNotAllowedMatches(dataRoutes);\n      return {\n        location,\n        matches: methodNotAllowedMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    } else if (!matches) {\n      let {\n        matches: notFoundMatches,\n        route,\n        error,\n      } = getNotFoundMatches(dataRoutes);\n      return {\n        location,\n        matches: notFoundMatches,\n        loaderData: {},\n        actionData: null,\n        errors: {\n          [route.id]: error,\n        },\n        statusCode: error.status,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    let result = await queryImpl(request, location, matches);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    // When returning StaticHandlerContext, we patch back in the location here\n    // since we need it for React Context.  But this helps keep our submit and\n    // loadRouteData operating on a Request instead of a Location\n    return { location, ...result };\n  }\n\n  /**\n   * The queryRoute() method is intended for targeted route requests, either\n   * for fetch ?_data requests or resource route requests.  In this case, we\n   * are only ever calling a single action or loader, and we are returning the\n   * returned value directly.  In most cases, this will be a Response returned\n   * from the action/loader, but it may be a primitive or other value as well -\n   * and in such cases the calling context should handle that accordingly.\n   *\n   * We do respect the throw/return differentiation, so if an action/loader\n   * throws, then this method will throw the value.  This is important so we\n   * can do proper boundary identification in Remix where a thrown Response\n   * must go to the Catch Boundary but a returned Response is happy-path.\n   *\n   * One thing to note is that any Router-initiated thrown Response (such as a\n   * 404 or 405) will have a custom X-Remix-Router-Error: \"yes\" header on it\n   * in order to differentiate from responses thrown from user actions/loaders.\n   */\n  async function queryRoute(request: Request, routeId?: string): Promise<any> {\n    let url = new URL(request.url);\n    let location = createLocation(\"\", createPath(url), null, \"default\");\n    let matches = matchRoutes(dataRoutes, location);\n\n    if (!validRequestMethods.has(request.method)) {\n      throw createRouterErrorResponse(null, {\n        status: 405,\n        statusText: \"Method Not Allowed\",\n      });\n    } else if (!matches) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\",\n      });\n    }\n\n    let match = routeId\n      ? matches.find((m) => m.route.id === routeId)\n      : getTargetMatch(matches, location);\n\n    if (!match) {\n      throw createRouterErrorResponse(null, {\n        status: 404,\n        statusText: \"Not Found\",\n      });\n    }\n\n    let result = await queryImpl(request, location, matches, match);\n    if (result instanceof Response) {\n      return result;\n    }\n\n    let error = result.errors ? Object.values(result.errors)[0] : undefined;\n    if (error !== undefined) {\n      // If we got back result.errors, that means the loader/action threw\n      // _something_ that wasn't a Response, but it's not guaranteed/required\n      // to be an `instanceof Error` either, so we have to use throw here to\n      // preserve the \"error\" state outside of queryImpl.\n      throw error;\n    }\n\n    // Pick off the right state value to return\n    let routeData = [result.actionData, result.loaderData].find((v) => v);\n    return Object.values(routeData || {})[0];\n  }\n\n  async function queryImpl(\n    request: Request,\n    location: Location,\n    matches: AgnosticDataRouteMatch[],\n    routeMatch?: AgnosticDataRouteMatch\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    invariant(\n      request.signal,\n      \"query()/queryRoute() requests must contain an AbortController signal\"\n    );\n\n    try {\n      if (validActionMethods.has(request.method)) {\n        let result = await submit(\n          request,\n          matches,\n          routeMatch || getTargetMatch(matches, location),\n          routeMatch != null\n        );\n        return result;\n      }\n\n      let result = await loadRouteData(request, matches, routeMatch);\n      return result instanceof Response\n        ? result\n        : {\n            ...result,\n            actionData: null,\n            actionHeaders: {},\n          };\n    } catch (e) {\n      // If the user threw/returned a Response in callLoaderOrAction, we throw\n      // it to bail out and then return or throw here based on whether the user\n      // returned or threw\n      if (isQueryRouteResponse(e)) {\n        if (e.type === ResultType.error && !isRedirectResponse(e.response)) {\n          throw e.response;\n        }\n        return e.response;\n      }\n      // Redirects are always returned since they don't propagate to catch\n      // boundaries\n      if (isRedirectResponse(e)) {\n        return e;\n      }\n      throw e;\n    }\n  }\n\n  async function submit(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    actionMatch: AgnosticDataRouteMatch,\n    isRouteRequest: boolean\n  ): Promise<Omit<StaticHandlerContext, \"location\"> | Response> {\n    let result: DataResult;\n    if (!actionMatch.route.action) {\n      let href = createServerHref(new URL(request.url));\n      if (isRouteRequest) {\n        throw createRouterErrorResponse(null, {\n          status: 405,\n          statusText: \"Method Not Allowed\",\n        });\n      }\n      result = getMethodNotAllowedResult(href);\n    } else {\n      result = await callLoaderOrAction(\n        \"action\",\n        request,\n        actionMatch,\n        matches,\n        undefined, // Basename not currently supported in static handlers\n        true,\n        isRouteRequest\n      );\n\n      if (request.signal.aborted) {\n        let method = isRouteRequest ? \"queryRoute\" : \"query\";\n        throw new Error(`${method}() call aborted`);\n      }\n    }\n\n    if (isRedirectResult(result)) {\n      // Uhhhh - this should never happen, we should always throw these from\n      // callLoaderOrAction, but the type narrowing here keeps TS happy and we\n      // can get back on the \"throw all redirect responses\" train here should\n      // this ever happen :/\n      throw new Response(null, {\n        status: result.status,\n        headers: {\n          Location: result.location,\n        },\n      });\n    }\n\n    if (isDeferredResult(result)) {\n      throw new Error(\"defer() is not supported in actions\");\n    }\n\n    if (isRouteRequest) {\n      // Note: This should only be non-Response values if we get here, since\n      // isRouteRequest should throw any Response received in callLoaderOrAction\n      if (isErrorResult(result)) {\n        let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n        return {\n          matches: [actionMatch],\n          loaderData: {},\n          actionData: null,\n          errors: {\n            [boundaryMatch.route.id]: result.error,\n          },\n          // Note: statusCode + headers are unused here since queryRoute will\n          // return the raw Response or value\n          statusCode: 500,\n          loaderHeaders: {},\n          actionHeaders: {},\n        };\n      }\n\n      return {\n        matches: [actionMatch],\n        loaderData: {},\n        actionData: { [actionMatch.route.id]: result.data },\n        errors: null,\n        // Note: statusCode + headers are unused here since queryRoute will\n        // return the raw Response or value\n        statusCode: 200,\n        loaderHeaders: {},\n        actionHeaders: {},\n      };\n    }\n\n    if (isErrorResult(result)) {\n      // Store off the pending error - we use it to determine which loaders\n      // to call and will commit it when we complete the navigation\n      let boundaryMatch = findNearestBoundary(matches, actionMatch.route.id);\n      let context = await loadRouteData(request, matches, undefined, {\n        [boundaryMatch.route.id]: result.error,\n      });\n\n      // action status codes take precedence over loader status codes\n      return {\n        ...context,\n        statusCode: isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500,\n        actionData: null,\n        actionHeaders: {\n          ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n        },\n      };\n    }\n\n    let context = await loadRouteData(request, matches);\n\n    return {\n      ...context,\n      // action status codes take precedence over loader status codes\n      ...(result.statusCode ? { statusCode: result.statusCode } : {}),\n      actionData: {\n        [actionMatch.route.id]: result.data,\n      },\n      actionHeaders: {\n        ...(result.headers ? { [actionMatch.route.id]: result.headers } : {}),\n      },\n    };\n  }\n\n  async function loadRouteData(\n    request: Request,\n    matches: AgnosticDataRouteMatch[],\n    routeMatch?: AgnosticDataRouteMatch,\n    pendingActionError?: RouteData\n  ): Promise<\n    | Omit<StaticHandlerContext, \"location\" | \"actionData\" | \"actionHeaders\">\n    | Response\n  > {\n    let isRouteRequest = routeMatch != null;\n    let requestMatches = routeMatch\n      ? [routeMatch]\n      : getLoaderMatchesUntilBoundary(\n          matches,\n          Object.keys(pendingActionError || {})[0]\n        );\n    let matchesToLoad = requestMatches.filter((m) => m.route.loader);\n\n    // Short circuit if we have no loaders to run\n    if (matchesToLoad.length === 0) {\n      return {\n        matches,\n        loaderData: {},\n        errors: pendingActionError || null,\n        statusCode: 200,\n        loaderHeaders: {},\n      };\n    }\n\n    let results = await Promise.all([\n      ...matchesToLoad.map((match) =>\n        callLoaderOrAction(\n          \"loader\",\n          request,\n          match,\n          matches,\n          undefined, // Basename not currently supported in static handlers\n          true,\n          isRouteRequest\n        )\n      ),\n    ]);\n\n    if (request.signal.aborted) {\n      let method = isRouteRequest ? \"queryRoute\" : \"query\";\n      throw new Error(`${method}() call aborted`);\n    }\n\n    // Can't do anything with these without the Remix side of things, so just\n    // cancel them for now\n    results.forEach((result) => {\n      if (isDeferredResult(result)) {\n        result.deferredData.cancel();\n      }\n    });\n\n    // Process and commit output from loaders\n    let context = processRouteLoaderData(\n      matches,\n      matchesToLoad,\n      results,\n      pendingActionError\n    );\n\n    return {\n      ...context,\n      matches,\n    };\n  }\n\n  function createRouterErrorResponse(\n    body: BodyInit | null | undefined,\n    init: ResponseInit\n  ) {\n    return new Response(body, {\n      ...init,\n      headers: {\n        ...init.headers,\n        \"X-Remix-Router-Error\": \"yes\",\n      },\n    });\n  }\n\n  return {\n    dataRoutes,\n    query,\n    queryRoute,\n  };\n}\n\n//#endregion\n\n////////////////////////////////////////////////////////////////////////////////\n//#region Helpers\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * Given an existing StaticHandlerContext and an error thrown at render time,\n * provide an updated StaticHandlerContext suitable for a second SSR render\n */\nexport function getStaticContextFromError(\n  routes: AgnosticDataRouteObject[],\n  context: StaticHandlerContext,\n  error: any\n) {\n  let newContext: StaticHandlerContext = {\n    ...context,\n    statusCode: 500,\n    errors: {\n      [context._deepestRenderedBoundaryId || routes[0].id]: error,\n    },\n  };\n  return newContext;\n}\n\n// Normalize navigation options by converting formMethod=GET formData objects to\n// URLSearchParams so they behave identically to links with query params\nfunction normalizeNavigateOptions(\n  to: To,\n  opts?: RouterNavigateOptions,\n  isFetcher = false\n): {\n  path: string;\n  submission?: Submission;\n  error?: ErrorResponse;\n} {\n  let path = typeof to === \"string\" ? to : createPath(to);\n\n  // Return location verbatim on non-submission navigations\n  if (!opts || (!(\"formMethod\" in opts) && !(\"formData\" in opts))) {\n    return { path };\n  }\n\n  // Create a Submission on non-GET navigations\n  if (opts.formMethod != null && opts.formMethod !== \"get\") {\n    return {\n      path,\n      submission: {\n        formMethod: opts.formMethod,\n        formAction: createServerHref(parsePath(path)),\n        formEncType:\n          (opts && opts.formEncType) || \"application/x-www-form-urlencoded\",\n        formData: opts.formData,\n      },\n    };\n  }\n\n  // No formData to flatten for GET submission\n  if (!opts.formData) {\n    return { path };\n  }\n\n  // Flatten submission onto URLSearchParams for GET submissions\n  let parsedPath = parsePath(path);\n  try {\n    let searchParams = convertFormDataToSearchParams(opts.formData);\n    // Since fetcher GET submissions only run a single loader (as opposed to\n    // navigation GET submissions which run all loaders), we need to preserve\n    // any incoming ?index params\n    if (\n      isFetcher &&\n      parsedPath.search &&\n      hasNakedIndexQuery(parsedPath.search)\n    ) {\n      searchParams.append(\"index\", \"\");\n    }\n    parsedPath.search = `?${searchParams}`;\n  } catch (e) {\n    return {\n      path,\n      error: new ErrorResponse(\n        400,\n        \"Bad Request\",\n        \"Cannot submit binary form data using GET\"\n      ),\n    };\n  }\n\n  return { path: createPath(parsedPath) };\n}\n\nfunction getLoaderRedirect(\n  state: RouterState,\n  redirect: RedirectResult\n): Navigation {\n  let { formMethod, formAction, formEncType, formData } = state.navigation;\n  let navigation: NavigationStates[\"Loading\"] = {\n    state: \"loading\",\n    location: createLocation(state.location, redirect.location),\n    formMethod: formMethod || undefined,\n    formAction: formAction || undefined,\n    formEncType: formEncType || undefined,\n    formData: formData || undefined,\n  };\n  return navigation;\n}\n\n// Filter out all routes below any caught error as they aren't going to\n// render so we don't need to load them\nfunction getLoaderMatchesUntilBoundary(\n  matches: AgnosticDataRouteMatch[],\n  boundaryId?: string\n) {\n  let boundaryMatches = matches;\n  if (boundaryId) {\n    let index = matches.findIndex((m) => m.route.id === boundaryId);\n    if (index >= 0) {\n      boundaryMatches = matches.slice(0, index);\n    }\n  }\n  return boundaryMatches;\n}\n\nfunction getMatchesToLoad(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  submission: Submission | undefined,\n  location: Location,\n  isRevalidationRequired: boolean,\n  cancelledDeferredRoutes: string[],\n  cancelledFetcherLoads: string[],\n  pendingActionData?: RouteData,\n  pendingError?: RouteData,\n  fetchLoadMatches?: Map<string, FetchLoadMatch>\n): [AgnosticDataRouteMatch[], RevalidatingFetcher[]] {\n  let actionResult = pendingError\n    ? Object.values(pendingError)[0]\n    : pendingActionData\n    ? Object.values(pendingActionData)[0]\n    : null;\n\n  // Pick navigation matches that are net-new or qualify for revalidation\n  let boundaryId = pendingError ? Object.keys(pendingError)[0] : undefined;\n  let boundaryMatches = getLoaderMatchesUntilBoundary(matches, boundaryId);\n  let navigationMatches = boundaryMatches.filter(\n    (match, index) =>\n      match.route.loader != null &&\n      (isNewLoader(state.loaderData, state.matches[index], match) ||\n        // If this route had a pending deferred cancelled it must be revalidated\n        cancelledDeferredRoutes.some((id) => id === match.route.id) ||\n        shouldRevalidateLoader(\n          state.location,\n          state.matches[index],\n          submission,\n          location,\n          match,\n          isRevalidationRequired,\n          actionResult\n        ))\n  );\n\n  // Pick fetcher.loads that need to be revalidated\n  let revalidatingFetchers: RevalidatingFetcher[] = [];\n  fetchLoadMatches &&\n    fetchLoadMatches.forEach(([href, match, fetchMatches], key) => {\n      // This fetcher was cancelled from a prior action submission - force reload\n      if (cancelledFetcherLoads.includes(key)) {\n        revalidatingFetchers.push([key, href, match, fetchMatches]);\n      } else if (isRevalidationRequired) {\n        let shouldRevalidate = shouldRevalidateLoader(\n          href,\n          match,\n          submission,\n          href,\n          match,\n          isRevalidationRequired,\n          actionResult\n        );\n        if (shouldRevalidate) {\n          revalidatingFetchers.push([key, href, match, fetchMatches]);\n        }\n      }\n    });\n\n  return [navigationMatches, revalidatingFetchers];\n}\n\nfunction isNewLoader(\n  currentLoaderData: RouteData,\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let isNew =\n    // [a] -> [a, b]\n    !currentMatch ||\n    // [a, b] -> [a, c]\n    match.route.id !== currentMatch.route.id;\n\n  // Handle the case that we don't have data for a re-used route, potentially\n  // from a prior error or from a cancelled pending deferred\n  let isMissingData = currentLoaderData[match.route.id] === undefined;\n\n  // Always load if this is a net-new route or we don't yet have data\n  return isNew || isMissingData;\n}\n\nfunction isNewRouteInstance(\n  currentMatch: AgnosticDataRouteMatch,\n  match: AgnosticDataRouteMatch\n) {\n  let currentPath = currentMatch.route.path;\n  return (\n    // param change for this match, /users/123 -> /users/456\n    currentMatch.pathname !== match.pathname ||\n    // splat param changed, which is not present in match.path\n    // e.g. /files/images/avatar.jpg -> files/finances.xls\n    (currentPath &&\n      currentPath.endsWith(\"*\") &&\n      currentMatch.params[\"*\"] !== match.params[\"*\"])\n  );\n}\n\nfunction shouldRevalidateLoader(\n  currentLocation: string | Location,\n  currentMatch: AgnosticDataRouteMatch,\n  submission: Submission | undefined,\n  location: string | Location,\n  match: AgnosticDataRouteMatch,\n  isRevalidationRequired: boolean,\n  actionResult: DataResult | undefined\n) {\n  let currentUrl = createURL(currentLocation);\n  let currentParams = currentMatch.params;\n  let nextUrl = createURL(location);\n  let nextParams = match.params;\n\n  // This is the default implementation as to when we revalidate.  If the route\n  // provides it's own implementation, then we give them full control but\n  // provide this value so they can leverage it if needed after they check\n  // their own specific use cases\n  // Note that fetchers always provide the same current/next locations so the\n  // URL-based checks here don't apply to fetcher shouldRevalidate calls\n  let defaultShouldRevalidate =\n    isNewRouteInstance(currentMatch, match) ||\n    // Clicked the same link, resubmitted a GET form\n    currentUrl.toString() === nextUrl.toString() ||\n    // Search params affect all loaders\n    currentUrl.search !== nextUrl.search ||\n    // Forced revalidation due to submission, useRevalidate, or X-Remix-Revalidate\n    isRevalidationRequired;\n\n  if (match.route.shouldRevalidate) {\n    let routeChoice = match.route.shouldRevalidate({\n      currentUrl,\n      currentParams,\n      nextUrl,\n      nextParams,\n      ...submission,\n      actionResult,\n      defaultShouldRevalidate,\n    });\n    if (typeof routeChoice === \"boolean\") {\n      return routeChoice;\n    }\n  }\n\n  return defaultShouldRevalidate;\n}\n\nasync function callLoaderOrAction(\n  type: \"loader\" | \"action\",\n  request: Request,\n  match: AgnosticDataRouteMatch,\n  matches: AgnosticDataRouteMatch[],\n  basename: string | undefined,\n  isStaticRequest: boolean = false,\n  isRouteRequest: boolean = false\n): Promise<DataResult> {\n  let resultType;\n  let result;\n\n  // Setup a promise we can race against so that abort signals short circuit\n  let reject: () => void;\n  let abortPromise = new Promise((_, r) => (reject = r));\n  let onReject = () => reject();\n  request.signal.addEventListener(\"abort\", onReject);\n\n  try {\n    let handler = match.route[type];\n    invariant<Function>(\n      handler,\n      `Could not find the ${type} to run on the \"${match.route.id}\" route`\n    );\n\n    result = await Promise.race([\n      handler({ request, params: match.params }),\n      abortPromise,\n    ]);\n  } catch (e) {\n    resultType = ResultType.error;\n    result = e;\n  } finally {\n    request.signal.removeEventListener(\"abort\", onReject);\n  }\n\n  if (result instanceof Response) {\n    let status = result.status;\n\n    // Process redirects\n    if (status >= 300 && status <= 399) {\n      let location = result.headers.get(\"Location\");\n      invariant(\n        location,\n        \"Redirects returned/thrown from loaders/actions must have a Location header\"\n      );\n\n      // Support relative routing in redirects\n      let activeMatches = matches.slice(0, matches.indexOf(match) + 1);\n      let routePathnames = getPathContributingMatches(activeMatches).map(\n        (match) => match.pathnameBase\n      );\n      let requestPath = createURL(request.url).pathname;\n      let resolvedLocation = resolveTo(location, routePathnames, requestPath);\n      invariant(\n        createPath(resolvedLocation),\n        `Unable to resolve redirect location: ${result.headers.get(\"Location\")}`\n      );\n\n      // Prepend the basename to the redirect location if we have one\n      if (basename) {\n        let path = resolvedLocation.pathname;\n        resolvedLocation.pathname =\n          path === \"/\" ? basename : joinPaths([basename, path]);\n      }\n\n      location = createPath(resolvedLocation);\n\n      // Don't process redirects in the router during static requests requests.\n      // Instead, throw the Response and let the server handle it with an HTTP\n      // redirect.  We also update the Location header in place in this flow so\n      // basename and relative routing is taken into account\n      if (isStaticRequest) {\n        result.headers.set(\"Location\", location);\n        throw result;\n      }\n\n      return {\n        type: ResultType.redirect,\n        status,\n        location,\n        revalidate: result.headers.get(\"X-Remix-Revalidate\") !== null,\n      };\n    }\n\n    // For SSR single-route requests, we want to hand Responses back directly\n    // without unwrapping.  We do this with the QueryRouteResponse wrapper\n    // interface so we can know whether it was returned or thrown\n    if (isRouteRequest) {\n      // eslint-disable-next-line no-throw-literal\n      throw {\n        type: resultType || ResultType.data,\n        response: result,\n      };\n    }\n\n    let data: any;\n    let contentType = result.headers.get(\"Content-Type\");\n    if (contentType && contentType.startsWith(\"application/json\")) {\n      data = await result.json();\n    } else {\n      data = await result.text();\n    }\n\n    if (resultType === ResultType.error) {\n      return {\n        type: resultType,\n        error: new ErrorResponse(status, result.statusText, data),\n        headers: result.headers,\n      };\n    }\n\n    return {\n      type: ResultType.data,\n      data,\n      statusCode: result.status,\n      headers: result.headers,\n    };\n  }\n\n  if (resultType === ResultType.error) {\n    return { type: resultType, error: result };\n  }\n\n  if (result instanceof DeferredData) {\n    return { type: ResultType.deferred, deferredData: result };\n  }\n\n  return { type: ResultType.data, data: result };\n}\n\nfunction createRequest(\n  location: string | Location,\n  signal: AbortSignal,\n  submission?: Submission\n): Request {\n  let url = createURL(location).toString();\n  let init: RequestInit = { signal };\n\n  if (submission) {\n    let { formMethod, formEncType, formData } = submission;\n    init.method = formMethod.toUpperCase();\n    init.body =\n      formEncType === \"application/x-www-form-urlencoded\"\n        ? convertFormDataToSearchParams(formData)\n        : formData;\n  }\n\n  // Content-Type is inferred (https://fetch.spec.whatwg.org/#dom-request)\n  return new Request(url, init);\n}\n\nfunction convertFormDataToSearchParams(formData: FormData): URLSearchParams {\n  let searchParams = new URLSearchParams();\n\n  for (let [key, value] of formData.entries()) {\n    invariant(\n      typeof value === \"string\",\n      'File inputs are not supported with encType \"application/x-www-form-urlencoded\", ' +\n        'please use \"multipart/form-data\" instead.'\n    );\n    searchParams.append(key, value);\n  }\n\n  return searchParams;\n}\n\nfunction processRouteLoaderData(\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  activeDeferreds?: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors: RouterState[\"errors\"] | null;\n  statusCode: number;\n  loaderHeaders: Record<string, Headers>;\n} {\n  // Fill in loaderData/errors from our loaders\n  let loaderData: RouterState[\"loaderData\"] = {};\n  let errors: RouterState[\"errors\"] | null = null;\n  let statusCode: number | undefined;\n  let foundError = false;\n  let loaderHeaders: Record<string, Headers> = {};\n\n  // Process loader results into state.loaderData/state.errors\n  results.forEach((result, index) => {\n    let id = matchesToLoad[index].route.id;\n    invariant(\n      !isRedirectResult(result),\n      \"Cannot handle redirect results in processLoaderData\"\n    );\n    if (isErrorResult(result)) {\n      // Look upwards from the matched route for the closest ancestor\n      // error boundary, defaulting to the root match\n      let boundaryMatch = findNearestBoundary(matches, id);\n      let error = result.error;\n      // If we have a pending action error, we report it at the highest-route\n      // that throws a loader error, and then clear it out to indicate that\n      // it was consumed\n      if (pendingError) {\n        error = Object.values(pendingError)[0];\n        pendingError = undefined;\n      }\n      errors = Object.assign(errors || {}, {\n        [boundaryMatch.route.id]: error,\n      });\n      // Once we find our first (highest) error, we set the status code and\n      // prevent deeper status codes from overriding\n      if (!foundError) {\n        foundError = true;\n        statusCode = isRouteErrorResponse(result.error)\n          ? result.error.status\n          : 500;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    } else if (isDeferredResult(result)) {\n      activeDeferreds && activeDeferreds.set(id, result.deferredData);\n      loaderData[id] = result.deferredData.data;\n      // TODO: Add statusCode/headers once we wire up streaming in Remix\n    } else {\n      loaderData[id] = result.data;\n      // Error status codes always override success status codes, but if all\n      // loaders are successful we take the deepest status code.\n      if (\n        result.statusCode != null &&\n        result.statusCode !== 200 &&\n        !foundError\n      ) {\n        statusCode = result.statusCode;\n      }\n      if (result.headers) {\n        loaderHeaders[id] = result.headers;\n      }\n    }\n  });\n\n  // If we didn't consume the pending action error (i.e., all loaders\n  // resolved), then consume it here\n  if (pendingError) {\n    errors = pendingError;\n  }\n\n  return {\n    loaderData,\n    errors,\n    statusCode: statusCode || 200,\n    loaderHeaders,\n  };\n}\n\nfunction processLoaderData(\n  state: RouterState,\n  matches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  pendingError: RouteData | undefined,\n  revalidatingFetchers: RevalidatingFetcher[],\n  fetcherResults: DataResult[],\n  activeDeferreds: Map<string, DeferredData>\n): {\n  loaderData: RouterState[\"loaderData\"];\n  errors?: RouterState[\"errors\"];\n} {\n  let { loaderData, errors } = processRouteLoaderData(\n    matches,\n    matchesToLoad,\n    results,\n    pendingError,\n    activeDeferreds\n  );\n\n  // Process results from our revalidating fetchers\n  for (let index = 0; index < revalidatingFetchers.length; index++) {\n    let [key, , match] = revalidatingFetchers[index];\n    invariant(\n      fetcherResults !== undefined && fetcherResults[index] !== undefined,\n      \"Did not find corresponding fetcher result\"\n    );\n    let result = fetcherResults[index];\n\n    // Process fetcher non-redirect errors\n    if (isErrorResult(result)) {\n      let boundaryMatch = findNearestBoundary(state.matches, match.route.id);\n      if (!(errors && errors[boundaryMatch.route.id])) {\n        errors = {\n          ...errors,\n          [boundaryMatch.route.id]: result.error,\n        };\n      }\n      state.fetchers.delete(key);\n    } else if (isRedirectResult(result)) {\n      // Should never get here, redirects should get processed above, but we\n      // keep this to type narrow to a success result in the else\n      throw new Error(\"Unhandled fetcher revalidation redirect\");\n    } else if (isDeferredResult(result)) {\n      // Should never get here, deferred data should be awaited for fetchers\n      // in resolveDeferredResults\n      throw new Error(\"Unhandled fetcher deferred data\");\n    } else {\n      let doneFetcher: FetcherStates[\"Idle\"] = {\n        state: \"idle\",\n        data: result.data,\n        formMethod: undefined,\n        formAction: undefined,\n        formEncType: undefined,\n        formData: undefined,\n      };\n      state.fetchers.set(key, doneFetcher);\n    }\n  }\n\n  return { loaderData, errors };\n}\n\nfunction mergeLoaderData(\n  loaderData: RouteData,\n  newLoaderData: RouteData,\n  matches: AgnosticDataRouteMatch[]\n): RouteData {\n  let mergedLoaderData = { ...newLoaderData };\n  matches.forEach((match) => {\n    let id = match.route.id;\n    if (newLoaderData[id] === undefined && loaderData[id] !== undefined) {\n      mergedLoaderData[id] = loaderData[id];\n    }\n  });\n  return mergedLoaderData;\n}\n\n// Find the nearest error boundary, looking upwards from the leaf route (or the\n// route specified by routeId) for the closest ancestor error boundary,\n// defaulting to the root match\nfunction findNearestBoundary(\n  matches: AgnosticDataRouteMatch[],\n  routeId?: string\n): AgnosticDataRouteMatch {\n  let eligibleMatches = routeId\n    ? matches.slice(0, matches.findIndex((m) => m.route.id === routeId) + 1)\n    : [...matches];\n  return (\n    eligibleMatches.reverse().find((m) => m.route.hasErrorBoundary === true) ||\n    matches[0]\n  );\n}\n\nfunction getShortCircuitMatches(\n  routes: AgnosticDataRouteObject[],\n  status: number,\n  statusText: string\n): {\n  matches: AgnosticDataRouteMatch[];\n  route: AgnosticDataRouteObject;\n  error: ErrorResponse;\n} {\n  // Prefer a root layout route if present, otherwise shim in a route object\n  let route = routes.find((r) => r.index || !r.path || r.path === \"/\") || {\n    id: `__shim-${status}-route__`,\n  };\n\n  return {\n    matches: [\n      {\n        params: {},\n        pathname: \"\",\n        pathnameBase: \"\",\n        route,\n      },\n    ],\n    route,\n    error: new ErrorResponse(status, statusText, null),\n  };\n}\n\nfunction getNotFoundMatches(routes: AgnosticDataRouteObject[]) {\n  return getShortCircuitMatches(routes, 404, \"Not Found\");\n}\n\nfunction getMethodNotAllowedMatches(routes: AgnosticDataRouteObject[]) {\n  return getShortCircuitMatches(routes, 405, \"Method Not Allowed\");\n}\n\nfunction getMethodNotAllowedResult(path: Location | string): ErrorResult {\n  let href = typeof path === \"string\" ? path : createServerHref(path);\n  console.warn(\n    \"You're trying to submit to a route that does not have an action.  To \" +\n      \"fix this, please add an `action` function to the route for \" +\n      `[${href}]`\n  );\n  return {\n    type: ResultType.error,\n    error: new ErrorResponse(405, \"Method Not Allowed\", \"\"),\n  };\n}\n\n// Find any returned redirect errors, starting from the lowest match\nfunction findRedirect(results: DataResult[]): RedirectResult | undefined {\n  for (let i = results.length - 1; i >= 0; i--) {\n    let result = results[i];\n    if (isRedirectResult(result)) {\n      return result;\n    }\n  }\n}\n\n// Create an href to represent a \"server\" URL without the hash\nfunction createServerHref(location: Partial<Path> | Location | URL) {\n  return (location.pathname || \"\") + (location.search || \"\");\n}\n\nfunction isHashChangeOnly(a: Location, b: Location): boolean {\n  return (\n    a.pathname === b.pathname && a.search === b.search && a.hash !== b.hash\n  );\n}\n\nfunction isDeferredResult(result: DataResult): result is DeferredResult {\n  return result.type === ResultType.deferred;\n}\n\nfunction isErrorResult(result: DataResult): result is ErrorResult {\n  return result.type === ResultType.error;\n}\n\nfunction isRedirectResult(result?: DataResult): result is RedirectResult {\n  return (result && result.type) === ResultType.redirect;\n}\n\nfunction isRedirectResponse(result: any): result is Response {\n  if (!(result instanceof Response)) {\n    return false;\n  }\n\n  let status = result.status;\n  let location = result.headers.get(\"Location\");\n  return status >= 300 && status <= 399 && location != null;\n}\n\nfunction isQueryRouteResponse(obj: any): obj is QueryRouteResponse {\n  return (\n    obj &&\n    obj.response instanceof Response &&\n    (obj.type === ResultType.data || ResultType.error)\n  );\n}\n\nasync function resolveDeferredResults(\n  currentMatches: AgnosticDataRouteMatch[],\n  matchesToLoad: AgnosticDataRouteMatch[],\n  results: DataResult[],\n  signal: AbortSignal,\n  isFetcher: boolean,\n  currentLoaderData?: RouteData\n) {\n  for (let index = 0; index < results.length; index++) {\n    let result = results[index];\n    let match = matchesToLoad[index];\n    let currentMatch = currentMatches.find(\n      (m) => m.route.id === match.route.id\n    );\n    let isRevalidatingLoader =\n      currentMatch != null &&\n      !isNewRouteInstance(currentMatch, match) &&\n      (currentLoaderData && currentLoaderData[match.route.id]) !== undefined;\n\n    if (isDeferredResult(result) && (isFetcher || isRevalidatingLoader)) {\n      // Note: we do not have to touch activeDeferreds here since we race them\n      // against the signal in resolveDeferredData and they'll get aborted\n      // there if needed\n      await resolveDeferredData(result, signal, isFetcher).then((result) => {\n        if (result) {\n          results[index] = result || results[index];\n        }\n      });\n    }\n  }\n}\n\nasync function resolveDeferredData(\n  result: DeferredResult,\n  signal: AbortSignal,\n  unwrap = false\n): Promise<SuccessResult | ErrorResult | undefined> {\n  let aborted = await result.deferredData.resolveData(signal);\n  if (aborted) {\n    return;\n  }\n\n  if (unwrap) {\n    try {\n      return {\n        type: ResultType.data,\n        data: result.deferredData.unwrappedData,\n      };\n    } catch (e) {\n      // Handle any TrackedPromise._error values encountered while unwrapping\n      return {\n        type: ResultType.error,\n        error: e,\n      };\n    }\n  }\n\n  return {\n    type: ResultType.data,\n    data: result.deferredData.data,\n  };\n}\n\nfunction hasNakedIndexQuery(search: string): boolean {\n  return new URLSearchParams(search).getAll(\"index\").some((v) => v === \"\");\n}\n\n// Note: This should match the format exported by useMatches, so if you change\n// this please also change that :)  Eventually we'll DRY this up\nfunction createUseMatchesMatch(\n  match: AgnosticDataRouteMatch,\n  loaderData: RouteData\n): UseMatchesMatch {\n  let { route, pathname, params } = match;\n  return {\n    id: route.id,\n    pathname,\n    params,\n    data: loaderData[route.id] as unknown,\n    handle: route.handle as unknown,\n  };\n}\n\nfunction getTargetMatch(\n  matches: AgnosticDataRouteMatch[],\n  location: Location | string\n) {\n  let search =\n    typeof location === \"string\" ? parsePath(location).search : location.search;\n  if (\n    matches[matches.length - 1].route.index &&\n    hasNakedIndexQuery(search || \"\")\n  ) {\n    // Return the leaf index route when index is present\n    return matches[matches.length - 1];\n  }\n  // Otherwise grab the deepest \"path contributing\" match (ignoring index and\n  // pathless layout routes)\n  let pathMatches = getPathContributingMatches(matches);\n  return pathMatches[pathMatches.length - 1];\n}\n\nfunction createURL(location: Location | string): URL {\n  let base =\n    typeof window !== \"undefined\" && typeof window.location !== \"undefined\"\n      ? window.location.origin\n      : \"unknown://unknown\";\n  let href =\n    typeof location === \"string\" ? location : createServerHref(location);\n  return new URL(href, base);\n}\n//#endregion\n"],"names":["Action","PopStateEventType","createMemoryHistory","options","initialEntries","initialIndex","v5Compat","entries","map","entry","index","createMemoryLocation","state","undefined","clampIndex","length","action","Pop","listener","n","Math","min","max","getCurrentLocation","to","key","location","createLocation","pathname","warning","charAt","JSON","stringify","history","createHref","createPath","push","Push","nextLocation","splice","replace","Replace","go","delta","listen","fn","createBrowserHistory","createBrowserLocation","window","globalHistory","search","hash","usr","createBrowserHref","getUrlBasedHistory","createHashHistory","createHashLocation","parsePath","substr","createHashHref","base","document","querySelector","href","getAttribute","url","hashIndex","indexOf","slice","validateHashLocation","cond","message","console","warn","Error","e","createKey","random","toString","getHistoryState","current","path","parsedPath","searchIndex","getLocation","validateLocation","defaultView","handlePop","historyState","pushState","error","assign","replaceState","addEventListener","removeEventListener","ResultType","isIndexRoute","route","convertRoutesToDataRoutes","routes","parentPath","allIds","Set","treePath","id","join","invariant","children","has","add","indexRoute","pathOrLayoutRoute","matchRoutes","locationArg","basename","stripBasename","branches","flattenRoutes","rankRouteBranches","matches","i","matchRouteBranch","safelyDecodeURI","parentsMeta","forEach","meta","relativePath","caseSensitive","childrenIndex","startsWith","joinPaths","routesMeta","concat","score","computeScore","sort","a","b","compareIndexes","paramRe","dynamicSegmentValue","indexRouteValue","emptySegmentValue","staticSegmentValue","splatPenalty","isSplat","s","segments","split","initialScore","some","filter","reduce","segment","test","siblings","every","branch","matchedParams","matchedPathname","end","remainingPathname","match","matchPath","Object","params","pathnameBase","normalizePathname","generatePath","_","prefix","__","str","star","pattern","matcher","paramNames","compilePath","captureGroups","memo","paramName","splatValue","safelyDecodeURIComponent","endsWith","regexpSource","RegExp","value","decodeURI","decodeURIComponent","toLowerCase","startIndex","nextChar","resolvePath","fromPathname","toPathname","resolvePathname","normalizeSearch","normalizeHash","relativeSegments","pop","getInvalidPathError","char","field","dest","getPathContributingMatches","resolveTo","toArg","routePathnames","locationPathname","isPathRelative","includes","isEmptyPath","from","routePathnameIndex","toSegments","shift","hasExplicitTrailingSlash","hasCurrentTrailingSlash","getToPathname","paths","json","data","init","responseInit","status","headers","Headers","set","Response","AbortedDeferredError","DeferredData","constructor","pendingKeys","subscriber","Array","isArray","reject","abortPromise","Promise","r","controller","AbortController","onAbort","unlistenAbortSignal","signal","acc","trackPromise","promise","race","then","onSettle","catch","defineProperty","get","aborted","delete","done","subscribe","cancel","abort","v","k","resolveData","resolve","size","unwrappedData","unwrapTrackedPromise","isTrackedPromise","_tracked","_error","_data","defer","redirect","ErrorResponse","statusText","isRouteErrorResponse","IDLE_NAVIGATION","formMethod","formAction","formEncType","formData","IDLE_FETCHER","isBrowser","createElement","isServer","createRouter","dataRoutes","unlistenHistory","subscribers","savedScrollPositions","getScrollRestorationKey","getScrollPosition","initialScrollRestored","initialMatches","initialErrors","getNotFoundMatches","initialized","m","loader","hydrationData","router","historyAction","navigation","restoreScrollPosition","preventScrollReset","revalidation","loaderData","actionData","errors","fetchers","Map","pendingAction","HistoryAction","pendingPreventScrollReset","pendingNavigationController","isUninterruptedRevalidation","isRevalidationRequired","cancelledDeferredRoutes","cancelledFetcherLoads","fetchControllers","incrementingLoadId","pendingNavigationLoadId","fetchReloadIds","fetchRedirectIds","fetchLoadMatches","activeDeferreds","initialize","startNavigation","dispose","clear","deleteFetcher","updateState","newState","completeNavigation","isActionReload","newLoaderData","mergeLoaderData","getSavedScrollPosition","navigate","opts","submission","normalizeNavigateOptions","createURL","pendingError","revalidate","interruptActiveLoads","startUninterruptedRevalidation","overrideNavigation","saveScrollPosition","loadingNavigation","notFoundMatches","cancelActiveDeferreds","isHashChangeOnly","request","createRequest","pendingActionData","findNearestBoundary","actionOutput","handleAction","shortCircuited","pendingActionError","handleLoaders","result","actionMatch","getTargetMatch","getMethodNotAllowedResult","callLoaderOrAction","isRedirectResult","redirectNavigation","startRedirectNavigation","isErrorResult","boundaryMatch","isDeferredResult","matchesToLoad","revalidatingFetchers","getMatchesToLoad","routeId","fetcher","revalidatingFetcher","results","loaderResults","fetcherResults","callLoadersAndMaybeResolveData","findRedirect","getLoaderRedirect","processLoaderData","deferredData","markFetchRedirectsDone","didAbortFetchLoads","abortStaleFetchLoads","getFetcher","fetch","abortFetcher","setFetcherError","handleFetcherAction","handleFetcherLoader","requestMatches","existingFetcher","abortController","fetchRequest","actionResult","loadingFetcher","revalidationRequest","loadId","loadFetcher","staleKey","doneFetcher","resolveDeferredData","redirectHistoryAction","currentMatches","fetchersToLoad","all","fetchMatches","resolveDeferredResults","markFetchersDone","keys","doneKeys","landedId","yeetedKeys","predicate","cancelledRouteIds","dfd","enableScrollRestoration","positions","getPosition","getKey","y","userMatches","createUseMatchesMatch","_internalFetchControllers","_internalActiveDeferreds","validActionMethods","validRequestMethods","unstable_createStaticHandler","query","URL","method","methodNotAllowedMatches","getMethodNotAllowedMatches","statusCode","loaderHeaders","actionHeaders","queryImpl","queryRoute","createRouterErrorResponse","find","values","routeData","routeMatch","submit","loadRouteData","isQueryRouteResponse","type","isRedirectResponse","response","isRouteRequest","createServerHref","Location","context","getLoaderMatchesUntilBoundary","processRouteLoaderData","body","getStaticContextFromError","newContext","_deepestRenderedBoundaryId","isFetcher","searchParams","convertFormDataToSearchParams","hasNakedIndexQuery","append","boundaryId","boundaryMatches","findIndex","navigationMatches","isNewLoader","shouldRevalidateLoader","shouldRevalidate","currentLoaderData","currentMatch","isNew","isMissingData","isNewRouteInstance","currentPath","currentLocation","currentUrl","currentParams","nextUrl","nextParams","defaultShouldRevalidate","routeChoice","isStaticRequest","resultType","onReject","handler","activeMatches","requestPath","resolvedLocation","contentType","text","deferred","toUpperCase","Request","URLSearchParams","foundError","mergedLoaderData","eligibleMatches","reverse","hasErrorBoundary","getShortCircuitMatches","obj","isRevalidatingLoader","unwrap","getAll","handle","pathMatches","origin"],"mappings":"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"}